// koffee 1.20.0

/*
000   000  000000000  000  000       0000000    
000   000     000     000  000      000         
000   000     000     000  000      0000000     
000   000     000     000  000           000    
 0000000      000     000  0000000  0000000
 */
var childp, empty, firstLineCol, lastLineCol, register, slash, valid;

childp = require('child_process');

slash = require('kslash');

empty = function(a) {
    return (a === '' || a === null || a === (void 0)) || (typeof a === 'object' && Object.keys(a).length === 0);
};

valid = function(a) {
    return !empty(a);
};


/*
00000000   00000000   0000000   000   0000000  000000000  00000000  00000000   
000   000  000       000        000  000          000     000       000   000  
0000000    0000000   000  0000  000  0000000      000     0000000   0000000    
000   000  000       000   000  000       000     000     000       000   000  
000   000  00000000   0000000   000  0000000      000     00000000  000   000
 */

register = function() {
    var Module, binary, fork, loadFile;
    loadFile = function(module, file) {
        var Kode, code, err, kode, result;
        try {
            Kode = require('./kode');
            kode = new Kode({
                header: true,
                files: [file],
                map: false
            });
            code = slash.readText(file);
            result = kode.compile(code);
            return module._compile(result, file);
        } catch (error) {
            err = error;
            console.error("error loading " + file + ":", code);
            throw err;
        }
    };
    if (require.extensions) {
        require.extensions['.kode'] = loadFile;
        require.extensions['.coffee'] = loadFile;
        Module = require('module');
        Module.prototype.load = function(file) {
            var ext;
            this.filename = file;
            this.paths = Module._nodeModulePaths(slash.dir(file));
            ext = '.' + slash.ext(file);
            Module._extensions[ext](this, file);
            return this.loaded = true;
        };
    }
    if (childp) {
        fork = childp.fork;
        binary = require.resolve('../bin/kode');
        return childp.fork = function(path, args, options) {
            var ref;
            if ((ref = slash.ext(path)) === 'kode' || ref === 'coffee') {
                if (!Array.isArray(args)) {
                    options = args || {};
                    args = [];
                }
                args = [path].concat(args);
                path = binary;
            }
            return fork(path, args, options);
        };
    }
};

lastLineCol = function(e) {
    var cols, ref;
    if ((e != null ? e.col : void 0) != null) {
        return {
            line: e.line,
            col: e.col + ((ref = e.text) != null ? ref.length : void 0)
        };
    } else if ((e != null) && e instanceof Object) {
        cols = Object.values(e).map(lastLineCol);
        if (valid(cols)) {
            return cols.reduce(function(a, b) {
                if (a.line > b.line) {
                    return a;
                } else if (a.line === b.line) {
                    if (a.col > b.col) {
                        return a;
                    } else {
                        return b;
                    }
                } else {
                    return b;
                }
            });
        }
    }
    return {
        line: 1,
        col: 0
    };
};

firstLineCol = function(e) {
    var cols;
    if ((e != null ? e.col : void 0) != null) {
        return {
            line: e.line,
            col: e.col
        };
    } else if ((e != null) && e instanceof Object) {
        cols = Object.values(e).map(firstLineCol);
        if (valid(cols)) {
            return cols.reduce(function(a, b) {
                if (a.line < b.line) {
                    return a;
                } else if (a.line === b.line) {
                    if (a.col < b.col) {
                        return a;
                    } else {
                        return b;
                    }
                } else {
                    return b;
                }
            });
        }
    }
    return {
        line: 2e308,
        col: 2e308
    };
};

module.exports = {
    register: register,
    firstLineCol: firstLineCol,
    lastLineCol: lastLineCol,
    empty: empty,
    valid: valid
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/utils.coffee