###
000000000  00000000   0000000  000000000  00000000  00000000 
   000     000       000          000     000       000   000
   000     0000000   0000000      000     0000000   0000000  
   000     000            000     000     000       000   000
   000     00000000  0000000      000     00000000  000   000
###

kstr = require 'kstr'

depth = 0
comps = 0
succs = 0
fails = []
stack = []

class Tester

    @: (@kode) ->

        @debug = @kode.args.debug
        
    #  0000000  00000000   0000000  000000000  000   0000000   000   000  
    # 000       000       000          000     000  000   000  0000  000  
    # 0000000   0000000   000          000     000  000   000  000 0 000  
    #      000  000       000          000     000  000   000  000  0000  
    # 0000000   00000000   0000000     000     000   0000000   000   000  
    
    section: (t, f) ->

        stack.push t
        comps = 0
        depth++
        log W1 kstr.lpad('' depth*3-1) + ' ' + global["y#{Math.max 1, 8-2*depth}"] t + ' '
        f()
        stack.pop()
        
    #  0000000   0000000   00     00  00000000    0000000   00000000   00000000  
    # 000       000   000  000   000  000   000  000   000  000   000  000       
    # 000       000   000  000000000  00000000   000000000  0000000    0000000   
    # 000       000   000  000 0 000  000        000   000  000   000  000       
    #  0000000   0000000   000   000  000        000   000  000   000  00000000  
    
    compare: (a, b) =>

        ind = kstr.lpad('' (depth+1)*3)
        
        comps++
        
        if a == b
            succs++
            return
        
        log R3(r2(ind + comps + ' ')) + ' ' + r5(@short a) + ' ' + R1(r4 ' ▸ ') + ' ' + g1(@short b)
        
        fails.push
            stack: stack.join(' ')
            comps: comps
            lhs:   a
            rhs:   b
            
    # 000000000  00000000   0000000  000000000  
    #    000     000       000          000     
    #    000     0000000   0000000      000     
    #    000     000            000     000     
    #    000     00000000  0000000      000     
    
    test: (text, file) ->
        
        g = 
            cmp:     @compare
            section: @section
        
        tests = @kode.eval text, file, g

        tests each (k,v) ->
            depth = 0
            stack.push k
            log G1 y8 ' ' + k + ' '
            v()
            stack.pop()
        
        summary = ''
        summary += b5(succs+fails.length) + b1(' tests ')
        summary += g4("✔") + ' ' + g5(succs) + g1(' ok ') if succs
        summary += R2 y2(' ❌ ') + y6(fails.length) + y3(' failures ') if valid fails
        log summary

    #  0000000  000   000   0000000   00000000   000000000  
    # 000       000   000  000   000  000   000     000     
    # 0000000   000000000  000   000  0000000       000     
    #      000  000   000  000   000  000   000     000     
    # 0000000   000   000   0000000   000   000     000     
    
    short: (s) ->
        
        split = (''+s).split '\n'
        
        l = 0
        split = split each (v) ->
            a = Math.min v.length, 30 - l
            l += a
            v[...a]
         
        split = split.filter (s) -> s.length
            
        ss = split.join w2 '➜ '
        if l >= 30 then ss += w2 '...'
        ss
        
module.exports = Tester
