// koffee 1.20.0
var LineMap, SourceMap;

LineMap = (function() {
    function LineMap(line1) {
        this.line = line1;
        this.columns = [];
    }

    LineMap.prototype.add = function(column, arg) {
        var sourceColumn, sourceLine;
        sourceLine = arg[0], sourceColumn = arg[1];
        if (this.columns[column]) {
            console.log("LineMap has column " + column, sourceLine, sourceColumn, options);
            return;
        }
        return this.columns[column] = {
            line: this.line,
            column: column,
            sourceLine: sourceLine,
            sourceColumn: sourceColumn
        };
    };

    LineMap.prototype.sourceLocation = function(column) {
        var mapping;
        while (!((mapping = this.columns[column]) || (column <= 0))) {
            column--;
        }
        return mapping && [mapping.sourceLine, mapping.sourceColumn];
    };

    return LineMap;

})();


/*
 0000000   0000000   000   000  00000000    0000000  00000000  00     00   0000000   00000000   
000       000   000  000   000  000   000  000       000       000   000  000   000  000   000  
0000000   000   000  000   000  0000000    000       0000000   000000000  000000000  00000000   
     000  000   000  000   000  000   000  000       000       000 0 000  000   000  000        
0000000    0000000    0000000   000   000   0000000  00000000  000   000  000   000  000
 */

SourceMap = (function() {
    function SourceMap(source1) {
        this.source = source1;
        this.jscode = '';
        this.jsline = 0;
        this.lines = [];
    }

    SourceMap.prototype.commit = function(s, tl) {
        if (tl) {
            console.log(b7('c'), ++this.jsline, s);
            this.jsline += s.split('\n').length - 1;
            return this.jscode += s + '\n';
        } else {
            return console.log(b4('.'), this.jsline, s);
        }
    };

    SourceMap.prototype.done = function(s) {
        return console.log(b5('d'), this.jsline, s.length);
    };

    SourceMap.prototype.add = function(source, target) {
        var base, column, line;
        line = target[0], column = target[1];
        if ((base = this.lines)[line] != null) {
            base[line];
        } else {
            base[line] = new LineMap(line);
        }
        return this.lines[line].add(column, source);
    };

    SourceMap.prototype.sourceLocation = function(arg) {
        var column, line, lineMap;
        line = arg[0], column = arg[1];
        while (!((lineMap = this.lines[line]) || (line <= 0))) {
            line--;
        }
        return lineMap && lineMap.sourceLocation(column);
    };

    SourceMap.prototype.generate = function(opt, code) {
        var buffer, i, j, lastColumn, lastSourceColumn, lastSourceLine, len, len1, lineMap, lineNumber, mapping, needComma, ref, ref1, writingline;
        if (opt == null) {
            opt = {};
        }
        writingline = 0;
        lastColumn = 0;
        lastSourceLine = 0;
        lastSourceColumn = 0;
        needComma = false;
        buffer = "";
        ref = this.lines;
        for (lineNumber = i = 0, len = ref.length; i < len; lineNumber = ++i) {
            lineMap = ref[lineNumber];
            if (lineMap) {
                ref1 = lineMap.columns;
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                    mapping = ref1[j];
                    if (!(mapping)) {
                        continue;
                    }
                    while (writingline < mapping.line) {
                        lastColumn = 0;
                        needComma = false;
                        buffer += ";";
                        writingline++;
                    }
                    if (needComma) {
                        buffer += ",";
                        needComma = false;
                    }
                    buffer += this.encodeVlq(mapping.column - lastColumn);
                    lastColumn = mapping.column;
                    buffer += this.encodeVlq(0);
                    buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);
                    lastSourceLine = mapping.sourceLine;
                    buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);
                    lastSourceColumn = mapping.sourceColumn;
                    needComma = true;
                }
            }
        }
        return {
            version: 3,
            file: opt.target || '',
            sourceRoot: opt.root || '',
            sources: [opt.source || ''],
            names: [],
            mappings: buffer,
            sourcesContent: [code]
        };
    };

    SourceMap.prototype.encodeVlq = function(value) {
        var VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK, answer, nextChunk, signBit, valueToEncode;
        VLQ_SHIFT = 5;
        VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;
        VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;
        signBit = value < 0 ? 1 : 0;
        valueToEncode = (Math.abs(value) << 1) + signBit;
        answer = '';
        while (valueToEncode || !answer) {
            nextChunk = valueToEncode & VLQ_VALUE_MASK;
            valueToEncode = valueToEncode >> VLQ_SHIFT;
            if (valueToEncode) {
                nextChunk |= VLQ_CONTINUATION_BIT;
            }
            answer += this.encodeBase64(nextChunk);
        }
        return answer;
    };

    SourceMap.prototype.encodeBase64 = function(value) {
        var BASE64_CHARS;
        BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        return BASE64_CHARS[value] || (function() {
            throw new Error("Cannot Base64 encode value: " + value);
        })();
    };

    return SourceMap;

})();

module.exports = SourceMap;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/srcmap.coffee