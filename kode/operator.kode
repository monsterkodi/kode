###
 0000000   00000000   00000000  00000000    0000000   000000000   0000000   00000000   
000   000  000   000  000       000   000  000   000     000     000   000  000   000  
000   000  00000000   0000000   0000000    000000000     000     000   000  0000000    
000   000  000        000       000   000  000   000     000     000   000  000   000  
 0000000   000        00000000  000   000  000   000     000      0000000   000   000  
###

# walks through an abstract syntax tree and sorts operation chains by precedence

precedence = (o) ->
    t = o?.operation?.operator.text
    switch t
    
        'not' 'delete' 'empty' 'valid' '~'        ➜  0
        '*' '/' '%'                               ➜  1
        '+' '-'                                   ➜  2
        '<<' '>>' '>>>'                           ➜  3
        '<' '<=' '>' '>='                         ➜  4
        'is' 'equals'                             ➜  5
        '==' '!='                                 ➜  6
        '&'                                       ➜  7
        '^'                                       ➜  8
        '|'                                       ➜  9
        'and'                                     ➜ 10
        'or'                                      ➜ 11
        '?' '?:'                                  ➜ 12
        '='                                       ➜ 13
        '+=' '-=' '*=' '/=' '%=' '&=' '^=' '|='   ➜ 14
        '<<=' '>>=' '>>>=' '&&=' '||=' '?='       ➜ 15
                                                  ➜ Infinity

print = require './print'

class Operator

    @: (@kode) ->

        @verbose = @kode.args.verbose
        @debug   = @kode.args.debug
        
    #  0000000   0000000   000      000      00000000   0000000  000000000  
    # 000       000   000  000      000      000       000          000     
    # 000       000   000  000      000      0000000   000          000     
    # 000       000   000  000      000      000       000          000     
    #  0000000   0000000   0000000  0000000  00000000   0000000     000     
    
    collect: (tl) ->
        
        if tl?.exps?.length
            @exp e for e in tl.exps
        tl
        
    # 00000000  000   000  00000000   
    # 000        000 000   000   000  
    # 0000000     00000    00000000   
    # 000        000 000   000        
    # 00000000  000   000  000        
    
    exp: (e) ->

        if  
            not e       ➜ return
            e.type      ➜ return
            e.operation ➜ @op e
            e is Array  ➜ @exp v for v in e if e.length
            e is Object
                for key,val of e
                    if val
                        if val.operation then @op val
                        else @exp v for k,v of val
                                    
    #  0000000   00000000   
    # 000   000  000   000  
    # 000   000  00000000   
    # 000   000  000        
    #  0000000   000        
    
    op: (e) ->
        
        chain = [e]
        
        c = e.operation
        while c.rhs?.operation
            chain.push c.rhs
            c = c.rhs.operation
        
        if chain.length > 1
            
            p = chain.map (i) -> precedence i
                        
            for i in 1...p.length
                if p[i] > p[i-1]
                    @fixPrec e, chain, p
                    break
                    
    # 00000000  000  000   000          00000000   00000000   00000000   0000000
    # 000       000   000 000           000   000  000   000  000       000     
    # 000000    000    00000            00000000   0000000    0000000   000     
    # 000       000   000 000           000        000   000  000       000     
    # 000       000  000   000          000        000   000  00000000   0000000
    
    fixPrec: (e, chain, p) ->
        
        @logChain chain, p, precedence(e), precedence(e.rhs) if @debug
        
        if precedence(e) < precedence(e.rhs)
            
            log 'swap' precedence(e), precedence(e.rhs) if @debug
            print.ast 'before swap' e if @debug
            
            # newrhs = 
                # lhs:        e.lhs
                # operator:   e.operator
                # rhs:        e.rhs.lhs

            # e.lhs       = e.rhs.rhs
            # e.operator  = e.rhs.operator
            # e.rhs       = newrhs
#             
            # print.ast 'after swap' e

    logChain: (chain, p) ->
                
        s = ''
        rndr = (n) => 
            try
                w2 @kode.renderer.node n
            catch e
                print.noon e, n
        s += chain.map((i) => (rndr i.operation.lhs) + ' ' + w3(i.operation.operator.text) + ' ' + b6(precedence i)).join ' '
        s += ' ' + rndr(chain[-1].operation.rhs) ? '...'
        log w4('▪'), s, g3 p
        
    verb: -> if @verbose then console.log.apply console.log, arguments 

module.exports = Operator
