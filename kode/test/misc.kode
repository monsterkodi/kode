###
00     00  000   0000000   0000000
000   000  000  000       000
000000000  000  0000000   000
000 0 000  000       000  000
000   000  000  0000000    0000000
###

{ kc, ke } = require './utils'

▸ misc

    #  0000000  000       0000000   00     00  00000000   
    # 000       000      000   000  000   000  000   000  
    # 000       000      000000000  000000000  00000000   
    # 000       000      000   000  000 0 000  000        
    #  0000000  0000000  000   000  000   000  000        
    
    ▸ clamp
    
        ke  "clamp 1 10 12"         ▸ 10
        ke  "clamp 1 10 -1"         ▸ 1
        ke  "clamp 1 10"            ▸ 1
        ke  "clamp 1 10 null"       ▸ 1
        ke  "clamp 1 10 {}"         ▸ 1
        ke  "clamp 1 10 Infinity"   ▸ 10
        ke  "clamp 1 10 -Infinity"  ▸ 1
        ke  "clamp 1 10 NaN"        ▸ 1

        ke  "clamp -1 10 12"        ▸ 10
        ke  "clamp -1 10 -2"        ▸ -1
        ke  "clamp -1 10"           ▸ -1
        ke  "clamp -1 10 null"      ▸ -1
        ke  "clamp -1 10 {}"        ▸ -1
        ke  "clamp -1 10 Infinity"  ▸ 10
        ke  "clamp -1 10 -Infinity" ▸ -1
        ke  "clamp -1 10 NaN"       ▸ -1

        ke  "clamp 10.1 2.2 12"         ▸ 10.1
        ke  "clamp 10.1 2.2 -2"         ▸ 2.2
        ke  "clamp 10.1 2.2"            ▸ 2.2
        ke  "clamp 10.1 2.2 null"       ▸ 2.2
        ke  "clamp 10.1 2.2 {}"         ▸ 2.2
        ke  "clamp 10.1 2.2 Infinity"   ▸ 10.1
        ke  "clamp 10.1 2.2 -Infinity"  ▸ 2.2
        ke  "clamp 10.1 2.2 NaN"        ▸ 2.2

        ke  "clamp 5 5 12"          ▸ 5
        ke  "clamp 5 5 -2"          ▸ 5
        ke  "clamp 5 5"             ▸ 5
        ke  "clamp 5 5 null"        ▸ 5
        ke  "clamp 5 5 {}"          ▸ 5
        ke  "clamp 5 5 Infinity"    ▸ 5
        ke  "clamp 5 5 -Infinity"   ▸ 5
        ke  "clamp 5 5 NaN"         ▸ 5
        
        ke  "clamp '1' '2' '3'"          ▸ 2
        ke  "clamp '1.12' '2.23' '3.34'" ▸ 2.23
        
        ke  "clamp null NaN 5"          ▸ 5
        ke  "clamp null 4 -3"           ▸ 0
        ke  "clamp null 4 2"            ▸ 2
        ke  "clamp null 4 5"            ▸ 4
        ke  "clamp NaN 4 -3"            ▸ -3
        ke  "clamp NaN 4 5"             ▸ 5
        ke  "clamp NaN 4 7"             ▸ 7
        ke  "clamp 4 NaN 5"             ▸ 5
        ke  "clamp 4 NaN 3"             ▸ 3
        ke  "clamp 4 NaN -2"            ▸ -2
        ke  "clamp 4 null -3"           ▸ 0
        ke  "clamp 4 null 2"            ▸ 2
        ke  "clamp 4 null 5"            ▸ 4
        ke  "clamp null null null"      ▸ 0
        ke  "clamp null null"           ▸ 0
        ke  "clamp null"                ▸ NaN
        ke  "clamp()"                   ▸ NaN
        ke  "clamp NaN NaN NaN"         ▸ NaN
        
    ▸ int
    
        ke  "int 1.234"         ▸ 1 
        ke  "int '2.34'"        ▸ 2 

    ▸ float
    
        ke  "float 1.234"       ▸ 1.234 
        ke  "float '2.34'"      ▸ 2.34
        
    ▸ first
    
        ke  "first []"          ▸ undefined
        ke  "first [1]"         ▸ 1
        ke  "first [1 2]"       ▸ 1
        ke  "first [null 2]"    ▸ null
        ke  "first [[3,4] 2]"   ▸ [3,4]
        ke  "first 'abc'"       ▸ 'a'
        ke  "first 1"           ▸ undefined
        ke  "first {}"          ▸ undefined
        ke  "first null"        ▸ null

    ▸ last
    
        ke  "last []"           ▸ undefined
        ke  "last [1]"          ▸ 1
        ke  "last [1 2]"        ▸ 2
        ke  "last [null 2]"     ▸ 2
        ke  "last [[3,4] 2]"    ▸ 2
        ke  "last 'abc'"        ▸ 'c'
        ke  "last 1"            ▸ undefined
        ke  "last {}"           ▸ undefined
        ke  "last null"         ▸ null
        
    ▸ min
    
        ke  "min()"                         ▸ Infinity
        ke  "min null"                      ▸ Infinity
        ke  "min []"                        ▸ Infinity
        ke  "min {}"                        ▸ Infinity
        ke  "min null 3"                    ▸ 3
        ke  "min [] 3"                      ▸ 3
        ke  "min {} 3"                      ▸ 3
        ke  "min 2 1"                       ▸ 1
        ke  "min 3 2 1"                     ▸ 1
        ke  "min [3 2 1]"                   ▸ 1
        ke  "min [5 6] 4 [3 2]"             ▸ 2
        ke  "min [8 [9 [10 [7 6]]]]"        ▸ 6
        ke  "min '2.2' '1.1'"               ▸ 1.1

        ke  "min NaN, 2 1"                  ▸ 1
        ke  "min NaN, 3 2 1"                ▸ 1
        ke  "min NaN, [3 2 1]"              ▸ 1
        ke  "min NaN, [5 6], 4 [3 2]"       ▸ 2
        ke  "min NaN, [8 [9 [10 [7 6]]]]"   ▸ 6
        
    ▸ max
    
        ke  "max()"                         ▸ -Infinity
        ke  "max null"                      ▸ -Infinity
        ke  "max []"                        ▸ -Infinity
        ke  "max {}"                        ▸ -Infinity
        ke  "max null 3"                    ▸ 3
        ke  "max [] 3"                      ▸ 3
        ke  "max {} 3"                      ▸ 3
        ke  "max 2 1"                       ▸ 2
        ke  "max 1 2 3"                     ▸ 3
        ke  "max [1 2 3]"                   ▸ 3
        ke  "max [5 6], 4 [3 2]"            ▸ 6
        ke  "max [8 [9 [10 [7 6]]]]"        ▸ 10
        ke  "max '2.2' '1.1'"               ▸ 2.2
        
        ke  "max NaN, 2 1"                  ▸ 2
        ke  "max NaN, 3 2 1"                ▸ 3
        ke  "max NaN, [3 2 1]"              ▸ 3
        ke  "max NaN, [5 6], 4 [3 2]"       ▸ 6
        ke  "max NaN, [8 [9 [10 [7 16]]]]"  ▸ 16
        
    #  0000000  000       0000000   000   000  00000000  
    # 000       000      000   000  0000  000  000       
    # 000       000      000   000  000 0 000  0000000   
    # 000       000      000   000  000  0000  000       
    #  0000000  0000000   0000000   000   000  00000000  
    
    ▸ clone
    
        ke  """
            a = b:1 c: d: 3
            c = clone a
            """ ▸
            b:1 c: d: 3
            
        ke  """
            a = b:1 c: d: 3
            c = clone a
            noon c
            """ ▸
            """
            b   1
            c
                d   3
            """
        ke  "clone 0" ▸ 0
        ke  "clone 1" ▸ 1
        ke  "clone 'a'" ▸ 'a'
        ke  "clone null" ▸ null
        ke  "clone undefined" ▸ undefined
        ke  "clone Infinity" ▸ Infinity
        ke  "clone []" ▸ []
        ke  "clone [1]" ▸ [1]
        ke  "clone [null]" ▸ [null]
        ke  "clone a:null" ▸ a:null

    # 000000000  000   000  000   0000000  
    #    000     000   000  000  000       
    #    000     000000000  000  0000000   
    #    000     000   000  000       000  
    #    000     000   000  000  0000000   
    
    ▸ this

        kc  '@'             ▸   'this'
        kc  '@a'            ▸   'this.a'
        kc  '@a.b'          ▸   'this.a.b'
        kc  '@a.b()'        ▸   'this.a.b()'
        kc  't = @'         ▸   't = this'
        kc  'f(1,@)'        ▸   'f(1,this)'
        kc  '@[1]'          ▸   'this[1]'
        kc  '@[2]()'        ▸   'this[2]()'
        kc  '@[3](4)'       ▸   'this[3](4)'
        kc  '@[5] 6'        ▸   'this[5](6)'
        
        kc  'return @ if a' ▸   
            """
            if (a)
            {
                return this
            }
            """
        
        kc  "a.on 'b' @c"   ▸   "a.on('b',this.c)" 
        kc  "a.on 'b' @c"   ▸   "a.on('b',this.c)" 

        kc  """
            if @
                1
            """ ▸
            """
            if (this)
            {
                1
            }
            """

        kc  """
            if @ then 1
            """ ▸
            """
            if (this)
            {
                1
            }
            """
            
        kc  """
            a @, file
            """ ▸
            """
            a(this,file)
            """
            
        kc  """
            a = @ == b
            """ ▸
            """
            a = this === b
            """
            
    # 000000000  00000000   000   000  
    #    000     000   000   000 000   
    #    000     0000000      00000    
    #    000     000   000     000     
    #    000     000   000     000     
    
    ▸ try

        kc  """
            try 
                somethg
            catch
                blark
            """ ▸
            """
            try
            {
                somethg
            }
            catch (err)
            {
                blark
            }
            """
        
        kc  """
            try 
                something
            catch err
                error err
            """ ▸
            """
            try
            {
                something
            }
            catch (err)
            {
                console.error(err)
            }
            """

        kc  """
            try 
                sthelse
            catch err
                error err
            finally
                cleanup
            """ ▸
            """
            try
            {
                sthelse
            }
            catch (err)
            {
                console.error(err)
            }
            finally
            {
                cleanup
            }
            """
            
        # 00000000   00000000  000000000  000   000  00000000   000   000   0000000  
        # 000   000  000          000     000   000  000   000  0000  000  000       
        # 0000000    0000000      000     000   000  0000000    000 0 000  0000000   
        # 000   000  000          000     000   000  000   000  000  0000       000  
        # 000   000  00000000     000      0000000   000   000  000   000  0000000   

        ▸ try returns
        
            kc  """
                a = ->
                    try
                        p
                    catch err
                       err
                """ ▸
                """
                
                a = function ()
                {
                    try
                    {
                        return p
                    }
                    catch (err)
                    {
                        return err
                    }
                }
                """
        
        ▸ if try returns
        
            kc  """
                a = ->
                    if 1
                        try
                            p
                        catch err
                           err
                """ ▸
                """
                
                a = function ()
                {
                    if (1)
                    {
                        try
                        {
                            return p
                        }
                        catch (err)
                        {
                            return err
                        }
                    }
                }
                """
            
    # 000000000  000   000  00000000    0000000   000   000  
    #    000     000   000  000   000  000   000  000 0 000  
    #    000     000000000  0000000    000   000  000000000  
    #    000     000   000  000   000  000   000  000   000  
    #    000     000   000  000   000   0000000   00     00  
    
    ▸ throw
        
        kc  "throw 'msg'"   ▸ "throw 'msg'"
        
    # 0000000    00000000  000      00000000  000000000  00000000  
    # 000   000  000       000      000          000     000       
    # 000   000  0000000   000      0000000      000     0000000   
    # 000   000  000       000      000          000     000       
    # 0000000    00000000  0000000  00000000     000     00000000  
    
    ▸ delete
        
        kc  "delete a"                  ▸   "delete a"
        kc  "delete @a"                 ▸   "delete this.a"
        kc  "delete a.b"                ▸   "delete a.b"
                                           
        kc  '[delete a, b]'             ▸   ';[delete a,b]'
        kc  'delete a.b.c'              ▸   'delete a.b.c'
        kc  '[delete a.b, a:b]'         ▸   ';[delete a.b,{a:b}]'
        kc  'delete a.b == false'       ▸   'delete a.b === false'
            
    # 00000000   00000000   0000000   000   000  000  00000000   00000000
    # 000   000  000       000   000  000   000  000  000   000  000
    # 0000000    0000000   000 00 00  000   000  000  0000000    0000000
    # 000   000  000       000 0000   000   000  000  000   000  000
    # 000   000  00000000   00000 00   0000000   000  000   000  00000000

    ▸ require

        kc  "noon  = require 'noon'"    ▸   "noon = require('noon')"
        kc  """
            slash = require 'kslash'
            kstr  = require 'kstr'
            """ ▸
            """
            slash = require('kslash')
            kstr = require('kstr')
            """
            
        kc  """
            if true
                {m,n} = require 'bla'
            """ ▸
            """
            if (true)
            {
                m = require('bla').m
                n = require('bla').n
            
            }
            """
            
        kc  """
            { empty, noon, valid } = kxk
            """ ▸
            """
            empty = kxk.empty
            noon = kxk.noon
            valid = kxk.valid
            
            """

    # 00000000  00     00  00000000   000000000  000   000  
    # 000       000   000  000   000     000      000 000   
    # 0000000   000000000  00000000      000       00000    
    # 000       000 0 000  000           000        000     
    # 00000000  000   000  000           000        000     
    
    ▸ empty

        kc  """
            if empty [] == false
                1234
            """ ▸
            """
            if (_k_.empty([]) === false)
            {
                1234
            }
            """
            
        ke  "a = []; empty a"           ▸   true
        ke  "a = {}; empty a"           ▸   true
        ke  "a = ''; empty a"           ▸   true
        ke  "a = null; empty a"         ▸   true
        ke  "a = undefined; empty a"    ▸   true
        ke  "a = NaN; empty a"          ▸   true
        ke  'empty 1 or empty {}'       ▸   true
        ke  'empty {} or empty 1'       ▸   true
        ke  "a = Infinity; empty a"     ▸   false
        ke  "a = 0; empty a"            ▸   false
        ke  "a = 'a'; empty a"          ▸   false
        ke  "a = Infinity; empty a"     ▸   false
        ke  "a = [null]; empty a"       ▸   false
        ke  "a = {a:null}; empty a"     ▸   false
        ke  "a = [[]]; empty a"         ▸   false
        ke  'empty "x" or valid {}'     ▸   false
        ke  'empty {} and valid []'     ▸   false
        
    # 000   000   0000000   000      000  0000000    
    # 000   000  000   000  000      000  000   000  
    #  000 000   000000000  000      000  000   000  
    #    000     000   000  000      000  000   000  
    #     0      000   000  0000000  000  0000000    
    
    ▸ valid
        
        ke  "valid []"                  ▸   false
        ke  "valid {}"                  ▸   false
        ke  "valid ''"                  ▸   false
        ke  "valid null"                ▸   false
        ke  "valid undefined"           ▸   false
        ke  "valid NaN"                 ▸   false
        ke  'valid {} and valid 0'      ▸   false
        ke  "valid Infinity"            ▸   true
        ke  "valid 0"                   ▸   true
        ke  "valid 'a'"                 ▸   true
        ke  "valid [null]"              ▸   true
        ke  "valid {a:null}"            ▸   true
        ke  "valid [[]]"                ▸   true
        ke  'valid {} or valid 1'       ▸   true
        ke  "valid 'a' or valid ''"     ▸   true
        ke  "valid 'a' and empty ''"    ▸   true
        
    # 000   0000000  
    # 000  000       
    # 000  0000000   
    # 000       000  
    # 000  0000000   
    
    ▸ is
        
        ke '1 is "number"'              ▸   true
        ke 'a = {} is Object'           ▸   true
        ke 'a = {} is "object"'         ▸   true
        ke '(->) is "function"'         ▸   true
        ke '[] is "object"'             ▸   true
        ke '[] is Array'                ▸   true
        ke '"" is "string"'             ▸   true
        ke '(new String "") is String'  ▸   true
        ke '(new Number 0) is Number'   ▸   true
        
        ke  """
            class A
            class B extends A
            a = new B
            a is B and a is A and a is 'object'
            """ ▸ true
            
        ke '"" is String'               ▸   false
        ke '1 is Number'                ▸   false
        
        kc 'log new Object()'           ▸ 'console.log(new Object())'
        
        kc  "if d is 'function' and not o?" ▸ 
            """
            if (typeof(d) === 'function' && !(o != null))
            {
            }
            """
            
        kc  "if not a is Array and not a is 'object'" ▸ 
            """
            if (!(a instanceof Array) && !(typeof(a) === 'object'))
            {
            }
            """
            
        ▸ if block
        
            kc  """
                if
                    a is Object ➜ 1
                    a is Array  ➜ 2
                """ ▸
                """
                if (a instanceof Object)
                {
                    1
                }
                else if (a instanceof Array)
                {
                    2
                }
                """
                
            kc  """
                if
                    a is Object 
                        1
                    a is Array  
                        2
                """ ▸
                """
                if (a instanceof Object)
                {
                    1
                }
                else if (a instanceof Array)
                {
                    2
                }
                """
                
        ▸ str
        
            ke  'a = "" is str'                         ▸ true
            ke  'a = "abc" is str'                      ▸ true
            ke  'a = new String() is str'               ▸ true
            ke  'a = new String("") is str'             ▸ true
            ke  'a = new String("abc") is str'          ▸ true
            ke  '"" is str and "a" is str and new String("abc") is str' ▸ true
            ke  'a = 1 is str'                          ▸ false
            ke  'a = [] is str'                         ▸ false
            ke  'a = {} is str'                         ▸ false
            ke  'a = null is str'                       ▸ false
            ke  'a = undefined is str'                  ▸ false

        ▸ obj
        
            ke  'a = {} is obj'                         ▸ true
            ke  'a = {a:1} is obj'                      ▸ true
            ke  'a = new Object() is obj'               ▸ true
            ke  'a = new Object({}) is obj'             ▸ true
            ke  'a = new Object({a:1}) is obj'          ▸ true
            ke  '{} is obj and new Object() is obj' ▸ true
            ke  'null is obj or new Map() is obj or [] is obj' ▸ false
            ke  'a = 1 is obj'                          ▸ false
            ke  'a = [] is obj'                         ▸ false
            ke  'a = "x" is obj'                        ▸ false
            ke  'a = null is obj'                       ▸ false
            ke  'a = undefined is obj'                  ▸ false
            ke  'a = new String() is obj'               ▸ false
            ke  'a = new Array() is obj'                ▸ false
            ke  'a = new Map() is obj'                  ▸ false
            ke  'a = new Set() is obj'                  ▸ false

        ▸ arr
        
            ke  'a = [] is arr'                         ▸ true
            ke  'a = [[]] is arr'                       ▸ true
            ke  'a = new Array() is arr'                ▸ true
            ke  'a = new Array([]) is arr'              ▸ true
            ke  'a = new Array([1]) is arr'             ▸ true
            ke  '[] is arr and new Array() is arr'      ▸ true
            ke  'null is arr or new Set() is arr or {} is arr' ▸ false
            ke  'a = 1 is arr'                          ▸ false
            ke  'a = {} is arr'                         ▸ false
            ke  'a = "x" is arr'                        ▸ false
            ke  'a = null is arr'                       ▸ false
            ke  'a = undefined is arr'                  ▸ false
            ke  'a = new String() is arr'               ▸ false
            ke  'a = new Object() is arr'               ▸ false
            ke  'a = new Map() is arr'                  ▸ false
            ke  'a = new Set() is arr'                  ▸ false

        ▸ func
        
            ke  'a = ->\na is func'                     ▸ true
            ke  'a = ()->\na is func'                   ▸ true
            ke  'a = 1 is func'                          ▸ false
            ke  'a = {} is func'                         ▸ false
            ke  'a = "x" is func'                        ▸ false
            ke  'a = null is func'                       ▸ false
            ke  'a = undefined is func'                  ▸ false
            ke  'a = new String() is func'               ▸ false
            ke  'a = new Object() is func'               ▸ false
            ke  'a = new Array() is func'                ▸ false
            ke  'a = new Set() is func'                  ▸ false
            
        ▸ num
            # https://stackoverflow.com/questions/18082/validate-decimal-numbers-in-javascript-isnumeric/174921#174921
                
            ke  'a = "-10" is num'                      ▸ true
            ke  'a = "0" is num'                        ▸ true
            ke  'a = "5" is num'                        ▸ true
            ke  'a = -16 is num'                        ▸ true
            ke  'a = 0 is num'                          ▸ true
            ke  'a = 32 is num'                         ▸ true
            ke  'a = "040" is num'                      ▸ true
            ke  'a = 0144 is num'                       ▸ true
            ke  'a = "0xFF" is num'                     ▸ true
            ke  'a = 0xFFF is num'                      ▸ true
            ke  'a = "-1.6" is num'                     ▸ true
            ke  'a = "4.536" is num'                    ▸ true
            ke  'a = -2.6 is num'                       ▸ true
            ke  'a = 3.1415 is num'                     ▸ true
            ke  'a = 8e5 is num'                        ▸ true
            ke  'a = "123e-2" is num'                   ▸ true
            ke  'a = Infinity is num'                   ▸ true
            ke  'a = -Infinity is num'                  ▸ true
            ke  'a = Number.POSITIVE_INFINITY is num'   ▸ true
            ke  'a = Number.NEGATIVE_INFINITY is num'   ▸ true
            ke '"0xFF" is num and "-4.536" is num and 42 is num' ▸ true
            ke  'a = "" is num'                         ▸ false
            ke  'a = "        " is num'                 ▸ false
            ke  'a = "\t\t" is num'                     ▸ false
            ke  'a = "abcdefghijklm1234567890" is num'  ▸ false
            ke  'a = "xabcdefx" is num'                 ▸ false
            ke  'a = true is num'                       ▸ false
            ke  'a = false is num'                      ▸ false
            ke  'a = "bcfed5.2" is num'                 ▸ false
            ke  'a = "7.2acdgs" is num'                 ▸ false
            ke  'a = undefined is num'                  ▸ false
            ke  'a = null is num'                       ▸ false
            ke  'a = NaN is num'                        ▸ false
            ke  'a = (new Date(2009, 1, 1)) is num'     ▸ false
            ke  'a = (new Object()) is num'             ▸ false
            ke  'a = (->) is num'                       ▸ false
        
    # 000000000  000   000  00000000   00000000   0000000   00000000  
    #    000      000 000   000   000  000       000   000  000       
    #    000       00000    00000000   0000000   000   000  000000    
    #    000        000     000        000       000   000  000       
    #    000        000     000        00000000   0000000   000       
    
    ▸ typeof

        kc  """
            if typeof pat == 'string'
                1
            """ ▸
            """
            if (typeof(pat) === 'string')
            {
                1
            }
            """

    # 000  000   000   0000000  000000000   0000000   000   000   0000000  00000000   0000000   00000000
    # 000  0000  000  000          000     000   000  0000  000  000       000       000   000  000
    # 000  000 0 000  0000000      000     000000000  000 0 000  000       0000000   000   000  000000
    # 000  000  0000       000     000     000   000  000  0000  000       000       000   000  000
    # 000  000   000  0000000      000     000   000  000   000   0000000  00000000   0000000   000

    ▸ instanceof

        kc  'a instanceof b'            ▸   'a instanceof b'
        kc  'a instanceof b == true'    ▸   'a instanceof b === true'
        
    ▸ noon
    
        kc  'opt = noon.parse "1"'      ▸   'opt = noon.parse("1")'

    # 000  000   000         0000000   0000000   000   000  0000000    000  000000000  000   0000000   000   000
    # 000  0000  000        000       000   000  0000  000  000   000  000     000     000  000   000  0000  000
    # 000  000 0 000        000       000   000  000 0 000  000   000  000     000     000  000   000  000 0 000
    # 000  000  0000        000       000   000  000  0000  000   000  000     000     000  000   000  000  0000
    # 000  000   000         0000000   0000000   000   000  0000000    000     000     000   0000000   000   000

    ▸ in condition

        kc  "a in l"            ▸   "_k_.in(a,l)"
        kc  "a in 'xyz'"        ▸   "_k_.in(a,'xyz')"
        kc  "a in [1,2,3]"      ▸   "_k_.in(a,[1,2,3])"
        kc  "a not in b"        ▸   "!(_k_.in(a,b))"
        kc  "a not in [3,4]"    ▸   "!(_k_.in(a,[3,4]))"

        kc  """
            if a in l then 1
            """ ▸
            """
            if (_k_.in(a,l))
            {
                1
            }
            """

        kc  """
            if not a in l then 2
            """ ▸
            """
            if (!(_k_.in(a,l)))
            {
                2
            }
            """
            
        kc  """
            if a in l
                2
            """ ▸
            """
            if (_k_.in(a,l))
            {
                2
            }
            """
            
        # kc  "a = ( a:1 b:2 ) ->" ▸     "a = function(arg)"

    # 00000000   00000000   000  00     00  00000000   0000000  
    # 000   000  000   000  000  000   000  000       000       
    # 00000000   0000000    000  000000000  0000000   0000000   
    # 000        000   000  000  000 0 000  000            000  
    # 000        000   000  000  000   000  00000000  0000000   
    
    ▸ primes

        ke  """
            eratosthenes = (n) ->
                
                prime = [x < 2 and 1 or 0 for x in 0..n]
                
                for i in 0..Math.sqrt n
                    
                    if prime[i] == 0
                        
                        l = 2
            
                        while true
                            
                            break if n < j = i * l++
            
                            prime[j] = 1
            
                prime = prime each (i,p) -> [i, parseInt p ? 0 : i]
                prime = prime.filter (p) -> p
                            
            eratosthenes 100
            """ ▸ 
            [
              2  3  5  7  11 13 17 19 23 29 31 37 41 43 47 
              53 59 61 67 71 73 79 83 89 97
            ]
        
    #  0000000   0000000   00     00  00     00  00000000  000   000  000000000   0000000
    # 000       000   000  000   000  000   000  000       0000  000     000     000
    # 000       000   000  000000000  000000000  0000000   000 0 000     000     0000000
    # 000       000   000  000 0 000  000 0 000  000       000  0000     000          000
    #  0000000   0000000   000   000  000   000  00000000  000   000     000     0000000

    # ▸ comments

        # kc  """
            # # a
            # """
        #  """
            # // a
            # """

        # kc  """
            # # a
            # # b
            # """
        #  """
            # // a
            # // b
            # """

        # kc  """
            # # a
                # # b
            # """
        #  """
            # // a
                # // b
            # """

        # kc  """
            # 1 # a
            # 2    # b
            # """
        #  """
            # 1
              # // a
            # 2
                 # // b
            # """

        
