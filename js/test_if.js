// koffee 1.20.0

/*
000  00000000      000000000  000   000  00000000  000   000
000  000              000     000   000  000       0000  000
000  000000           000     000000000  0000000   000 0 000
000  000              000     000   000  000       000  0000
000  000              000     000   000  00000000  000   000
 */
var cmp;

cmp = require('./test_utils').cmp;

describe('if', function() {
    it('then', function() {
        cmp("if n\n    b ", "if (n)\n{\n    b\n}");
        cmp("if undefined == null\n    no", "if (undefined === null)\n{\n    false\n}");
        cmp("if 2\n    c = 0\n    1", "if (2)\n{\n    c = 0\n    1\n}");
        cmp('if false then true', "if (false)\n{\n    true\n}");
        cmp("if false\n    true", "if (false)\n{\n    true\n}");
        cmp("if false\n    true\na = 1", "if (false)\n{\n    true\n}\na = 1");
        cmp("if false\n    log 2.1\nlog 2", "if (false)\n{\n    console.log(2.1)\n}\nconsole.log(2)");
        cmp("if 2\n    a.b c", "if (2)\n{\n    a.b(c)\n}");
        cmp("if 3\n    a.b c\n    a.b c", "if (3)\n{\n    a.b(c)\n    a.b(c)\n}");
        cmp("if not op in ['--''++']\n    decr", "if (!['--','++'].indexOf(op) >= 0)\n{\n    decr\n}");
        return cmp("if op not in ['--''++']\n    incr", "if (!['--','++'].indexOf(op) >= 0)\n{\n    incr\n}");
    });
    it('inline', function() {
        cmp("v = if k == 1 then 2 else 3", "v = k === 1 ? 2 : 3");
        cmp("i = 1 if i == 0", "if (i === 0)\n{\n    i = 1\n}");
        cmp("if a then i = 10 if i == 10", "if (a)\n{\n    if (i === 10)\n    {\n        i = 10\n    }\n}");
        cmp("if false then true else no\na = 1", "false ? true : false\na = 1");
        cmp("if false then log 1.1\nlog 1", "if (false)\n{\n    console.log(1.1)\n}\nconsole.log(1)");
        cmp("if false then true else log 3.3\nlog 3", "false ? true : console.log(3.3)\nconsole.log(3)");
        cmp("if 1 then a.b c", "if (1)\n{\n    a.b(c)\n}");
        cmp("a = if 1 then 2 else if 3 then 4 else if 5 then 6 else 7", "a = 1 ? 2 : 3 ? 4 : 5 ? 6 : 7");
        return cmp("a = if 0 then if 1 then if 2 then 3 else if 4 then 5 else 6 else if 7 then 8 else 9 else if 10 then 11 else 12", "a = 0 ? 1 ? 2 ? 3 : 4 ? 5 : 6 : 7 ? 8 : 9 : 10 ? 11 : 12");

        /*
            a = if (0)
            {
                if (1)
                {
                    if (2)
                    {
                        3
                    }
                    else if (4)
                    {
                        5
                    }
                    else
                    {
                        6
                    }
                }
                else if (7)
                {
                    8
                }
                else
                {
                    9
                }
            }
            else if (10)
            {
                11
            }
            else
            {
                12
            }
         */
    });
    it('else if', function() {
        cmp("if 1\n    log 'YES'\nelse if no\n    false\nelse\n    log 'NO'\nlog 'end'", "if (1)\n{\n    console.log('YES')\n}\nelse if (false)\n{\n    false\n}\nelse\n{\n    console.log('NO')\n}\nconsole.log('end')");
        return cmp("if a in l\n    log 'YES'\nelse\n    log 'NO'\nlog 'END'", "if (l.indexOf(a) >= 0)\n{\n    console.log('YES')\n}\nelse\n{\n    console.log('NO')\n}\nconsole.log('END')");
    });
    it('returns', function() {
        cmp("-> if false then true", "function ()\n{\n    if (false)\n    {\n        return true\n    }\n}");
        return cmp("-> if 1 then 2 else 3", "function ()\n{\n    if (1)\n    {\n        return 2\n    }\n    else\n    {\n        return 3\n    }\n}");
    });
    return it('tail', function() {
        cmp("a if b", "if (b)\n{\n    a\n}");
        cmp("a if b if c", "if (c)\n{\n    if (b)\n    {\n        a\n    }\n}");
        return cmp("log 'msg' if dbg", "if (dbg)\n{\n    console.log('msg')\n}");
    });
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/test_if.coffee