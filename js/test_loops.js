// koffee 1.20.0

/*
000       0000000    0000000   00000000    0000000
000      000   000  000   000  000   000  000
000      000   000  000   000  00000000   0000000
000      000   000  000   000  000             000
0000000   0000000    0000000   000        0000000
 */
var cmp;

cmp = require('./test_utils').cmp;

describe('loops', function() {
    it('for in', function() {
        cmp("for t in l\n    t", "var list = l\nfor (var i = 0; i < list.length; i++)\n{\n    t = list[i]\n    t\n}");
        cmp("for a in [1,2,3] then log a", "var list = [1,2,3]\nfor (var i = 0; i < list.length; i++)\n{\n    a = list[i]\n    console.log(a)\n}");
        cmp("for a in [1,2,3] then log a\nlog a", "var list = [1,2,3]\nfor (var i = 0; i < list.length; i++)\n{\n    a = list[i]\n    console.log(a)\n}\nconsole.log(a)");
        cmp("for a in [1,2,3]\n    log '1' a\n    log '2' a\nlog '3' a", "var list = [1,2,3]\nfor (var i = 0; i < list.length; i++)\n{\n    a = list[i]\n    console.log('1',a)\n    console.log('2',a)\n}\nconsole.log('3',a)");
        cmp("for v,i in @regs\n    log i,v", "var list = this.regs\nfor (i = 0; i < list.length; i++)\n{\n    v = list[i]\n    console.log(i,v)\n}");
        cmp("for [a,b] in @regs\n    log a,b", "var list = this.regs\nfor (var i = 0; i < list.length; i++)\n{\n    a = list[i][0]\n    b = list[i][1]\n    console.log(a,b)\n}");
        cmp("for a in [1..2] then for b in [1..3] then c = 1; d = 1", "var list = [1,2]\nfor (var i = 0; i < list.length; i++)\n{\n    a = list[i]\n    var list1 = [1,2,3]\n    for (var i1 = 0; i1 < list1.length; i1++)\n    {\n        b = list1[i1]\n        c = 1\n        d = 1\n    }\n}");
        cmp("for a in [1..9] then for b in [1..9]\n    c = 3\n    d:\n        e: 1", "var list = [1,2,3,4,5,6,7,8,9]\nfor (var i = 0; i < list.length; i++)\n{\n    a = list[i]\n    var list1 = [1,2,3,4,5,6,7,8,9]\n    for (var i1 = 0; i1 < list1.length; i1++)\n    {\n        b = list1[i1]\n        c = 3\n        {d:{e:1}}\n    }\n}");
        return cmp("empty = (a) -> a in ['' null undefined] or b", "\nempty = function (a)\n{\n    return ['',null,undefined].indexOf(a) >= 0 || b\n}");
    });
    it('for of', function() {
        return cmp("for key,val of @patterns\n    log key, val", "for (key in this.patterns)\n{\n    val = this.patterns[key]\n    console.log(key,val)\n}");
    });
    it('for tail', function() {
        return cmp("f e for e in l ? []", "var list = ((_1_15_=l) != null ? _1_15_ : [])\nfor (var i = 0; i < list.length; i++)\n{\n    e = list[i]\n    f(e)\n}");
    });
    return it('while', function() {
        cmp("while true\n    log 4", "while (true)\n{\n    console.log(4)\n}");
        cmp("while true then log 5", "while (true)\n{\n    console.log(5)\n}");
        return cmp("while a == b then log c; log d\nlog e", "while (a === b)\n{\n    console.log(c)\n    console.log(d)\n}\nconsole.log(e)");
    });
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/test_loops.coffee