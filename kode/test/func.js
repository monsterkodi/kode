// koffee 1.20.0

/*
00000000  000   000  000   000   0000000
000       000   000  0000  000  000
000000    000   000  000 0 000  000
000       000   000  000  0000  000
000        0000000   000   000   0000000
 */
var cmp;

cmp = require('./utils').cmp;

describe('func', function() {
    it('func', function() {
        cmp('->', '(function ()\n{})');
        cmp('(a) ->', '(function (a)\n{})');
        cmp('(a,b,c) ->', '(function (a, b, c)\n{})');
        cmp('a = (a,b) ->', '\na = function (a, b)\n{}');
        cmp("-> return 1", "(function ()\n{\n    return 1\n})");
        cmp("->\n    1\n    2", "(function ()\n{\n    1\n    return 2\n})");
        cmp("->\n    return 1\n    2", "(function ()\n{\n    return 1\n    return 2\n})");
        cmp("->\n    1\n    return 2", "(function ()\n{\n    1\n    return 2\n})");
        cmp("a = (a,b,c) -> d", "\na = function (a, b, c)\n{\n    return d\n}");
        cmp("a.x = (y,z) -> q", "\na.x = function (y, z)\n{\n    return q\n}");
        cmp("a = ->\n    b = ->", "\na = function ()\n{\n    var b\n\n    return b = function ()\n    {}\n}");
        cmp("a = (b,c) ->\n    b = (e, f) -> g\n    b", "\na = function (b, c)\n{\n    b = function (e, f)\n    {\n        return g\n    }\n    return b\n}");
        cmp("a = (b,c) ->\n    b = (e, f) -> h", "\na = function (b, c)\n{\n    return b = function (e, f)\n    {\n        return h\n    }\n}");
        cmp("a = (b,c) ->\n    (e, f) -> j", "\na = function (b, c)\n{\n    return function (e, f)\n    {\n        return j\n    }\n}");
        cmp("f = ->\n    (a) -> 1", "\nf = function ()\n{\n    return function (a)\n    {\n        return 1\n    }\n}");
        cmp("a = ->\n    'a'\n1\n", "\na = function ()\n{\n    return 'a'\n}\n1");
        cmp("a = ->\n    log 'a'\n\nb = ->\n    log 'b'", "\na = function ()\n{\n    console.log('a')\n}\n\nb = function ()\n{\n    console.log('b')\n}");
        cmp("a = ( a, b=1 c=2 ) ->", "\na = function (a, b = 1, c = 2)\n{}");
        cmp("if 1 then return", "if (1)\n{\n    return\n}");
        cmp("if x then return\na", "if (x)\n{\n    return\n}\na");
        cmp("-> @a", "(function ()\n{\n    return this.a\n})");
        cmp("(@a) -> @a", "(function (a)\n{\n    this.a = a\n    return this.a\n})");
        return cmp("(@a,a) -> log @a", "(function (a1, a)\n{\n    this.a = a1\n    console.log(this.a)\n})");
    });
    return it('return', function() {
        cmp("f = ->\n    if 232 then return", "\nf = function ()\n{\n    if (232)\n    {\n        return\n    }\n}");
        cmp("f = ->\n    if 3\n        log '42'", "\nf = function ()\n{\n    if (3)\n    {\n        console.log('42')\n    }\n}");
        cmp("f = ->\n    if 4\n        '42'", "\nf = function ()\n{\n    if (4)\n    {\n        return '42'\n    }\n}");
        cmp("->\n    if 1 then h\n    else if 2\n        if 3 then j else k\n    else l", "(function ()\n{\n    if (1)\n    {\n        return h\n    }\n    else if (2)\n    {\n        if (3)\n        {\n            return j\n        }\n        else\n        {\n            return k\n        }\n    }\n    else\n    {\n        return l\n    }\n})");
        cmp("return 'Q' if t == 'W'", "if (t === 'W')\n{\n    return 'Q'\n}");
        cmp("return if not XXX", "if (!XXX)\n{\n    return\n}");
        return cmp("f = ->\n    try\n        'return me!'\n    catch e\n        error e", "\nf = function ()\n{\n    try\n    {\n        return 'return me!'\n    }\n    catch (e)\n    {\n        console.error(e)\n    }\n}");
    });
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=func.coffee