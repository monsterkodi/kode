###
00     00  000   0000000   0000000
000   000  000  000       000
000000000  000  0000000   000
000 0 000  000       000  000
000   000  000  0000000    0000000
###

{ kc, ke } = require './utils'

▸ misc

    # 000000000  000   000  000   0000000  
    #    000     000   000  000  000       
    #    000     000000000  000  0000000   
    #    000     000   000  000       000  
    #    000     000   000  000  0000000   
    
    ▸ this

        kc  '@'             ▸   'this'
        kc  '@a'            ▸   'this.a'
        kc  '@a.b'          ▸   'this.a.b'
        kc  '@a.b()'        ▸   'this.a.b()'
        kc  't = @'         ▸   't = this'
        
        kc  "a.on 'b' @c"   ▸   "a.on('b',this.c)" 
        kc  "a.on 'b' @c"   ▸   "a.on('b',this.c)" 

        kc  """
            if @
                1
            """ ▸
            """
            if (this)
            {
                1
            }
            """

        kc  """
            if @ then 1
            """ ▸
            """
            if (this)
            {
                1
            }
            """
            
        kc  """
            a @, file
            """ ▸
            """
            a(this,file)
            """
            
    # 000000000  00000000   000   000  
    #    000     000   000   000 000   
    #    000     0000000      00000    
    #    000     000   000     000     
    #    000     000   000     000     
    
    ▸ try

        kc  """
            try 
                somethg
            catch
                blark
            """ ▸
            """
            try
            {
                somethg
            }
            catch ()
            {
                blark
            }
            """
        
        kc  """
            try 
                something
            catch err
                error err
            """ ▸
            """
            try
            {
                something
            }
            catch (err)
            {
                console.error(err)
            }
            """

        kc  """
            try 
                sthelse
            catch err
                error err
            finally
                cleanup
            """ ▸
            """
            try
            {
                sthelse
            }
            catch (err)
            {
                console.error(err)
            }
            finally
            {
                cleanup
            }
            """
            
        # 00000000   00000000  000000000  000   000  00000000   000   000   0000000  
        # 000   000  000          000     000   000  000   000  0000  000  000       
        # 0000000    0000000      000     000   000  0000000    000 0 000  0000000   
        # 000   000  000          000     000   000  000   000  000  0000       000  
        # 000   000  00000000     000      0000000   000   000  000   000  0000000   
        
        ▸ if try returns
        
            kc  """
                a = ->
                    if 1
                        try
                            p
                        catch err
                           err
                """ ▸
                """
                
                a = function ()
                {
                    if (1)
                    {
                        try
                        {
                            return p
                        }
                        catch (err)
                        {
                            err
                        }
                    }
                }
                """
            
    # 000000000  000   000  00000000    0000000   000   000  
    #    000     000   000  000   000  000   000  000 0 000  
    #    000     000000000  0000000    000   000  000000000  
    #    000     000   000  000   000  000   000  000   000  
    #    000     000   000  000   000   0000000   00     00  
    
    ▸ throw
        
        kc  "throw 'msg'"   ▸ "throw 'msg'"
        
    # 0000000    00000000  000      00000000  000000000  00000000  
    # 000   000  000       000      000          000     000       
    # 000   000  0000000   000      0000000      000     0000000   
    # 000   000  000       000      000          000     000       
    # 0000000    00000000  0000000  00000000     000     00000000  
    
    ▸ delete
        
        kc  "delete a"                  ▸   "delete a"
        kc  "delete @a"                 ▸   "delete this.a"
        kc  "delete a.b"                ▸   "delete a.b"
                                           
        kc  '[delete a, b]'             ▸   ';[delete a,b]'
        kc  'delete a.b.c'              ▸   'delete a.b.c'
        kc  '[delete a.b, a:b]'         ▸   ';[delete a.b,{a:b}]'
        kc  'delete a.b == false'       ▸   'delete a.b === false'
            
    # 00000000   00000000   0000000   000   000  000  00000000   00000000
    # 000   000  000       000   000  000   000  000  000   000  000
    # 0000000    0000000   000 00 00  000   000  000  0000000    0000000
    # 000   000  000       000 0000   000   000  000  000   000  000
    # 000   000  00000000   00000 00   0000000   000  000   000  00000000

    ▸ require

        kc  "noon  = require 'noon'"    ▸   "noon = require('noon')"
        kc  """
            slash = require 'kslash'
            kstr  = require 'kstr'
            """ ▸
            """
            slash = require('kslash')
            kstr = require('kstr')
            """

    # 00000000  00     00  00000000   000000000  000   000  
    # 000       000   000  000   000     000      000 000   
    # 0000000   000000000  00000000      000       00000    
    # 000       000 0 000  000           000        000     
    # 00000000  000   000  000           000        000     
    
    ▸ empty

        kc  """
            if empty [] == false
                1234
            """ ▸
            """
            if (_k_.empty([]) === false)
            {
                1234
            }
            """
            
        ke  "a = []; empty a"           ▸   true
        ke  "a = {}; empty a"           ▸   true
        ke  "a = ''; empty a"           ▸   true
        ke  "a = null; empty a"         ▸   true
        ke  "a = undefined; empty a"    ▸   true
        ke  "a = NaN; empty a"          ▸   true
        ke  'empty 1 or empty {}'       ▸   true
        ke  'empty {} or empty 1'       ▸   true
        ke  "a = Infinity; empty a"     ▸   false
        ke  "a = 0; empty a"            ▸   false
        ke  "a = 'a'; empty a"          ▸   false
        ke  "a = Infinity; empty a"     ▸   false
        ke  "a = [null]; empty a"       ▸   false
        ke  "a = {a:null}; empty a"     ▸   false
        ke  "a = [[]]; empty a"         ▸   false
        ke  'empty "x" or valid {}'     ▸   false
        ke  'empty {} and valid []'     ▸   false
        
    # 000   000   0000000   000      000  0000000    
    # 000   000  000   000  000      000  000   000  
    #  000 000   000000000  000      000  000   000  
    #    000     000   000  000      000  000   000  
    #     0      000   000  0000000  000  0000000    
    
    ▸ valid
        
        ke  "valid []"                  ▸   false
        ke  "valid {}"                  ▸   false
        ke  "valid ''"                  ▸   false
        ke  "valid null"                ▸   false
        ke  "valid undefined"           ▸   false
        ke  "valid NaN"                 ▸   false
        ke  'valid {} and valid 0'      ▸   false
        ke  "valid Infinity"            ▸   true
        ke  "valid 0"                   ▸   true
        ke  "valid 'a'"                 ▸   true
        ke  "valid [null]"              ▸   true
        ke  "valid {a:null}"            ▸   true
        ke  "valid [[]]"                ▸   true
        ke  'valid {} or valid 1'       ▸   true
        ke  "valid 'a' or valid ''"     ▸   true
        ke  "valid 'a' and empty ''"    ▸   true
        
    # 000000000  000   000  00000000   00000000   0000000   00000000  
    #    000      000 000   000   000  000       000   000  000       
    #    000       00000    00000000   0000000   000   000  000000    
    #    000        000     000        000       000   000  000       
    #    000        000     000        00000000   0000000   000       
    
    ▸ typeof

        kc  """
            if typeof pat == 'string'
                1
            """ ▸
            """
            if (typeof(pat) === 'string')
            {
                1
            }
            """

    # 000  000   000   0000000  000000000   0000000   000   000   0000000  00000000   0000000   00000000
    # 000  0000  000  000          000     000   000  0000  000  000       000       000   000  000
    # 000  000 0 000  0000000      000     000000000  000 0 000  000       0000000   000   000  000000
    # 000  000  0000       000     000     000   000  000  0000  000       000       000   000  000
    # 000  000   000  0000000      000     000   000  000   000   0000000  00000000   0000000   000

    ▸ instanceof

        kc  'a instanceof b'            ▸   'a instanceof b'
        kc  'a instanceof b == true'    ▸   'a instanceof b === true'

    # 000  000   000         0000000   0000000   000   000  0000000    000  000000000  000   0000000   000   000
    # 000  0000  000        000       000   000  0000  000  000   000  000     000     000  000   000  0000  000
    # 000  000 0 000        000       000   000  000 0 000  000   000  000     000     000  000   000  000 0 000
    # 000  000  0000        000       000   000  000  0000  000   000  000     000     000  000   000  000  0000
    # 000  000   000         0000000   0000000   000   000  0000000    000     000     000   0000000   000   000

    ▸ in condition

        kc  "a in l"            ▸   "_k_.in(a,l)"
        kc  "a in 'xyz'"        ▸   "_k_.in(a,'xyz')"
        kc  "a in [1,2,3]"      ▸   "_k_.in(a,[1,2,3])"
        kc  "a not in b"        ▸   "!(_k_.in(a,b))"
        kc  "a not in [3,4]"    ▸   "!(_k_.in(a,[3,4]))"

        kc  """
            if a in l then 1
            """ ▸
            """
            if (_k_.in(a,l))
            {
                1
            }
            """

        kc  """
            if not a in l then 2
            """ ▸
            """
            if (!(_k_.in(a,l)))
            {
                2
            }
            """
            
        kc  """
            if a in l
                2
            """ ▸
            """
            if (_k_.in(a,l))
            {
                2
            }
            """
            
        # kc  "a = ( a:1 b:2 ) ->" ▸     "a = function(arg)"

    ▸ primes

        ke  """
            eratosthenes = (n) ->
                
                prime = [x < 2 and 1 or 0 for x in 0..n]
                
                for i in 0..Math.sqrt n
                    
                    if prime[i] == 0
                        
                        l = 2
            
                        while true
                            
                            break if n < j = i * l++
            
                            prime[j] = 1
            
                prime = prime each (i,p) -> [i, parseInt p ? 0 : i]
                prime = prime.filter (p) -> p
                            
            eratosthenes 100
            """ ▸ 
            [
              2  3  5  7  11 13 17 19 23 29 31 37 41 43 47 
              53 59 61 67 71 73 79 83 89 97
            ]
        
    #  0000000   0000000   00     00  00     00  00000000  000   000  000000000   0000000
    # 000       000   000  000   000  000   000  000       0000  000     000     000
    # 000       000   000  000000000  000000000  0000000   000 0 000     000     0000000
    # 000       000   000  000 0 000  000 0 000  000       000  0000     000          000
    #  0000000   0000000   000   000  000   000  00000000  000   000     000     0000000

    # ▸ comments

        # kc  """
            # # a
            # """
        #  """
            # // a
            # """

        # kc  """
            # # a
            # # b
            # """
        #  """
            # // a
            # // b
            # """

        # kc  """
            # # a
                # # b
            # """
        #  """
            # // a
                # // b
            # """

        # kc  """
            # 1 # a
            # 2    # b
            # """
        #  """
            # 1
              # // a
            # 2
                 # // b
            # """

        