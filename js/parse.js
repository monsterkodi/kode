// koffee 1.20.0

/*
00000000    0000000   00000000    0000000  00000000
000   000  000   000  000   000  000       000     
00000000   000000000  0000000    0000000   0000000 
000        000   000  000   000       000  000     
000        000   000  000   000  0000000   00000000
 */
var Parse, empty, print,
    indexOf = [].indexOf;

print = require('./print');

empty = function(a) {
    return (a === '' || a === null || a === (void 0)) || (typeof a === 'object' && Object.keys(a).length === 0);
};

Parse = (function() {
    function Parse(args) {
        this.debug = args != null ? args.debug : void 0;
        this.verbose = args != null ? args.verbose : void 0;
        this.raw = args != null ? args.raw : void 0;
    }

    Parse.prototype.parse = function(block) {
        var ast;
        this.stack = [];
        ast = this.exps('tl block', block.tokens);
        if (this.raw) {
            print.noon('raw ast', ast);
        }
        if (block.tokens.length) {
            print.tokens(block.tokens.length + " remaining tokens:", block.tokens);
        }
        return ast;
    };

    Parse.prototype.exps = function(rule, tokens, stop) {
        var block, es, ex, ref, ref1, ref2, ref3;
        if (empty(tokens)) {
            return;
        }
        if (tokens[0].type === 'block') {
            block = tokens.shift();
            if (((ref = tokens[0]) != null ? ref.type : void 0) === 'nl') {
                if (this.debug) {
                    print.tokens('swallow nl', tokens);
                }
                tokens.shift();
            }
            return this.exps('exps block', block.tokens);
        }
        es = [];
        while (tokens.length) {
            if (this.stack.slice(-1)[0] === rule && tokens[0].text === stop) {
                this.verb("stack.end " + this.stack.slice(-1)[0] + " " + tokens[0].text);
                break;
            } else if (((ref1 = this.stack.slice(-1)[0]) === 'if' || ref1 === 'switch') && (tokens[0].text === 'else')) {
                this.verb('exps else break');
                break;
            }
            if (tokens[0].type === 'nl') {
                this.verb('exps nl stop:', stop, tokens[0], this.stack);
                if (this.stack.slice(-1)[0] === 'if' && ((ref2 = tokens[1]) != null ? ref2.text : void 0) !== 'else') {
                    this.verb('exps ifbreak (shift nl ; and break)');
                    tokens.shift();
                    break;
                }
                if (stop) {
                    if (this.stack.slice(-1)[0] === 'call') {
                        this.verb('exps call.end (dont shift nl)');
                    } else {
                        tokens.shift();
                    }
                    this.verb('exps break on nl ;');
                    break;
                }
                tokens.shift();
                this.verb('exps continue...');
                continue;
            }
            if (tokens[0].text === ';') {
                if ((ref3 = this.stack.slice(-1)[0]) === 'call' || ref3 === '{') {
                    this.verb('exps call break on ;');
                    tokens.shift();
                    break;
                }
            }
            if (tokens[0].type === 'block') {
                this.verb('exps break on block');
                break;
            }
            if (tokens[0].text === ')') {
                this.verb('exps break on )');
                break;
            }
            ex = this.exp(tokens);
            es.push(ex);
        }
        return es;
    };

    Parse.prototype.exp = function(tokens) {
        var e, f, last, nxt, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref32, ref4, ref5, ref6, ref7, ref8, ref9, tok;
        if (empty(tokens)) {
            return;
        }
        tok = tokens.shift();
        if (this.debug) {
            console.log(Y5(w1(tok != null ? tok.text : void 0)));
        }
        if (tok.type === 'block') {
            console.log("DAGFUK! CLEAN UP YOUR MESSS!");
            if (((ref = tokens[0]) != null ? ref.type : void 0) === 'nl') {
                tokens.shift();
            }
            return this.exps('exp block', tok.tokens);
        } else if (tok.text === 'if') {
            return this["if"](tok, tokens);
        } else if (tok.text === 'for') {
            return this["for"](tok, tokens);
        } else if (tok.text === 'while') {
            return this["while"](tok, tokens);
        } else if (tok.text === 'switch') {
            return this["switch"](tok, tokens);
        } else if (tok.text === 'when') {
            return this.when(tok, tokens);
        } else if (tok.text === 'class') {
            return this["class"](tok, tokens);
        } else if (tok.text === 'return') {
            return this["return"](tok, tokens);
        } else if ((ref1 = tok.text) === '->' || ref1 === '=>') {
            return this.func(null, tok, tokens);
        } else if ((ref2 = tok.text) === ',' || ref2 === ';') {
            return this.exp(tokens);
        } else if (tok.type === 'nl') {
            return this.exp(tokens);
        }
        e = {
            token: tok
        };
        while (nxt = tokens[0]) {
            if (!e) {
                return console.error('no e?', nxt);
            }
            if (e.col != null) {
                last = e.col + ((ref3 = e.text) != null ? ref3.length : void 0);
            } else if (((ref4 = e.close) != null ? ref4.col : void 0) != null) {
                last = e.close.col + ((ref5 = e.close.text) != null ? ref5.length : void 0);
            } else if (((ref6 = Object.values(e)[0]) != null ? ref6.col : void 0) != null) {
                last = Object.values(e)[0].col + ((ref7 = Object.values(e)[0].text) != null ? ref7.length : void 0);
            } else if (((ref8 = Object.values(e)[0]) != null ? (ref9 = ref8.close) != null ? ref9.col : void 0 : void 0) != null) {
                last = Object.values(e)[0].close.col + ((ref10 = Object.values(e)[0].close.text) != null ? ref10.length : void 0);
            } else {
                last = -1;
                this.verb('parser no last? e:', e);
            }
            this.verb('parser last next', last, nxt.col);
            if (nxt.type === 'op' && ((ref11 = nxt.text) !== '++' && ref11 !== '--')) {
                this.verb('exp is lhs of op', e);
                e = this.operation(e, tokens.shift(), tokens);
            } else if (nxt.type === 'func') {
                f = tokens.shift();
                e = this.func(e, f, tokens);
            } else if (nxt.text === '(') {
                if (nxt.col === last) {
                    this.verb('exp is lhs of call');
                    e = this.call(e, tokens);
                } else {
                    this.verb('exp is open paren');
                    e = this.parens(tok, tokens);
                }
            } else if (nxt.text === '[' && nxt.col === last && ((ref12 = tokens[1]) != null ? ref12.text : void 0) !== ']' && ((ref13 = e.token) != null ? ref13.text : void 0) !== '[') {
                this.verb('exp is lhs of index', e);
                e = this.index(e, tokens);
            } else if (nxt.text === '.') {
                e = this.prop(e, tokens);
                break;
            } else if (nxt.text === ':') {
                if (this.stack.slice(-1)[0] !== '{') {
                    this.verb('exp is first key of implicit object', e);
                    e = this.object(e, tokens);
                } else {
                    this.verb('exp is key of (implicit) object', e);
                    e = this.keyval(e, tokens);
                }
            } else if (e.token) {
                if (e.token.text === '(') {
                    e = this.parens(e.token, tokens);
                } else if (e.token.text === '[') {
                    e = this.array(e.token, tokens);
                } else if (e.token.text === '{') {
                    e = this.curly(e.token, tokens);
                } else if (((ref14 = e.token.text) === '+' || ref14 === '-' || ref14 === '++' || ref14 === '--') && last === nxt.col) {
                    if (((ref15 = nxt.type) !== 'var' && ref15 !== 'paren') && ((ref16 = e.token.text) === '++' || ref16 === '--')) {
                        tokens.shift();
                        console.error('wrong lhs increment', e, nxt);
                        return;
                    }
                    e = this.operation(null, e.token, tokens);
                    if ((ref17 = (ref18 = e.operation.rhs) != null ? (ref19 = ref18.operation) != null ? (ref20 = ref19.operator) != null ? ref20.text : void 0 : void 0 : void 0) === '++' || ref17 === '--') {
                        console.error('left and right side increment');
                        return;
                    }
                } else if (((ref21 = nxt.text) === '++' || ref21 === '--') && last === nxt.col) {
                    if ((ref22 = e.token.type) !== 'var') {
                        tokens.shift();
                        console.error('wrong rhs increment');
                        return;
                    }
                    e = this.operation(e, tokens.shift());
                } else if (nxt.type === 'dots' && ((ref23 = e.token.type) === 'var' || ref23 === 'num')) {
                    e = this.slice(e, tokens);
                } else if (last < nxt.col && (ref24 = nxt.text, indexOf.call(')]},;:.', ref24) < 0) && ((ref25 = nxt.text) !== 'then' && ref25 !== 'else' && ref25 !== 'break' && ref25 !== 'continue' && ref25 !== 'in' && ref25 !== 'of') && ((ref26 = nxt.type) !== 'nl') && (nxt.type !== 'op' || last < nxt.col) && ((ref27 = e.token.type) !== 'num' && ref27 !== 'single' && ref27 !== 'double' && ref27 !== 'triple' && ref27 !== 'regex' && ref27 !== 'punct' && ref27 !== 'comment' && ref27 !== 'op') && ((ref28 = e.token.text) !== 'null' && ref28 !== 'undefined' && ref28 !== 'Infinity' && ref28 !== 'NaN' && ref28 !== 'true' && ref28 !== 'false' && ref28 !== 'yes' && ref28 !== 'no') && (e.token.type !== 'keyword' || ((ref29 = e.token.text) === 'new' || ref29 === 'require')) && (((ref30 = this.stack.slice(-1)[0]) !== 'if' && ref30 !== 'for') || nxt.line === e.token.line)) {
                    this.verb('exp is lhs of implicit call! e', e, this.stack.slice(-1)[0]);
                    this.verb('exp is lhs of implicit call! nxt', nxt);
                    e = this.call(e, tokens);
                } else {
                    this.verb('no nxt match?', nxt, this.stack);
                    break;
                }
            } else {
                if (((ref31 = nxt.text) === '++' || ref31 === '--') && last === nxt.col) {
                    e = this.operation(e, tokens.shift());
                } else if (nxt.type === 'dots' && (ref32 = this.stack.slice(-1)[0], indexOf.call('.', ref32) < 0)) {
                    e = this.slice(e, tokens);
                } else {
                    if (this.verbose) {
                        print.ast("no nxt match?? " + this.stack, e);
                    }
                    this.verb('no nxt match?? e:', e);
                    this.verb('no nxt match?? nxt:', nxt);
                }
                break;
            }
        }
        if (this.verbose) {
            print.ast('exp', e);
            console.log(blue('exp'), e);
        }
        return e;
    };

    return Parse;

})();

module.exports = Parse;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/parse.coffee