// koffee 1.20.0

/*
00000000   00000000   000  000   000  000000000
000   000  000   000  000  0000  000     000
00000000   0000000    000  000 0 000     000
000        000   000  000  000  0000     000
000        000   000  000  000   000     000
 */
var Print, childp, fs, klor, kstr, noon, slash;

kstr = require('kstr');

klor = require('klor');

noon = require('noon');

slash = require('kslash');

childp = require('child_process');

fs = require('fs-extra');

klor.kolor.globalize();

Print = (function() {
    function Print() {}

    Print.tokens = function(header, tokens) {
        var i, len, results, tok;
        console.log(R3(y5("\n " + header)));
        console.log(b6(kstr.pad('', 80, ' ')));
        results = [];
        for (i = 0, len = tokens.length; i < len; i++) {
            tok = tokens[i];
            results.push(this.token(tok));
        }
        return results;
    };

    Print.token = function(tok) {
        var indent, ref, toktext;
        indent = kstr.lpad('', tok.col);
        if (tok.type === 'nl') {
            console.log(red('◂'));
        }
        if ((ref = tok.type) === 'ws' || ref === 'nl') {
            return;
        }
        toktext = function(tok) {
            if (tok.text === '') {
                return '\n' + indent;
            } else if (tok.text) {
                return tok.text;
            } else if (tok.tokens) {
                return '\n' + (indent = tok.indent) + (tok.tokens.map(function(t) {
                    return toktext(t);
                })).join(' ');
            } else {
                return '???';
            }
        };
        return console.log(b6(kstr.lpad(tok.line, 4)), blue(kstr.lpad(tok.col, 3)), gray(kstr.pad(tok.type, 10)), bold(yellow(indent + toktext(tok))));
    };

    Print.stack = function(stack, node, color) {
        if (color == null) {
            color = W4;
        }
        return console.log(W2(stack.join(' ') + ' ') + color(node != null ? node : ''));
    };

    Print.block = function(header, block, legend) {
        var printBlock;
        if (legend == null) {
            legend = false;
        }
        console.log(R3(y5("\n " + header)));
        printBlock = function(b) {
            var c, ci, cn, i, len, ref, ref1, ref2, ref3, s;
            if (legend) {
                s = b.indent + b6(kstr.rpad(b.line, 3)) + b5('- ' + kstr.pad(b.last, 3)) + w2(kstr.rpad(b.col, 3)) + yellow(b.tokens.length);
                s += '\n' + b.indent;
            }
            s = b.indent;
            if ((ref = b.type) === '{}' || ref === '()' || ref === '[]') {
                s += b.type[0] + ' ';
            }
            ref1 = b.tokens;
            for (i = 0, len = ref1.length; i < len; i++) {
                c = ref1[i];
                if (c.tokens != null) {
                    s += '\n' + printBlock(c) + b.indent;
                } else if (c.type === 'nl') {
                    s += '\n' + b.indent + '▸';
                } else {
                    ci = parseInt(b.indent.length / 4);
                    cn = ['g5', 'r5', 'm5', 'g3', 'r3', 'm3', 'g1', 'r1', 'm1'][ci % 8];
                    s += global[cn](((ref2 = c.text) != null ? ref2 : '') + ' ');
                }
            }
            if ((ref3 = b.type) === '{}' || ref3 === '()' || ref3 === '[]') {
                s += b.type[1];
            }
            return s;
        };
        return console.log(printBlock(block));
    };

    Print.ast = function(header, ast) {
        var i, len, node, printNode, results;
        console.log(R3(y5("\n " + header)));
        printNode = function(node, indent) {
            var i, len, name, s, value;
            if (indent == null) {
                indent = '';
            }
            s = '';
            if (!node) {
                return s;
            }
            if (node.type) {
                s += b6(kstr.lpad(node.line, 4)) + ' ' + blue(kstr.lpad(node.col, 3)) + ' ' + gray(kstr.pad(node.type, 10)) + ' ' + bold(yellow(indent + node.text) + '\n');
            } else if (node instanceof Array) {
                s += (kstr.lpad('', 19)) + ' ' + bold(w3(indent + '{'));
                for (i = 0, len = node.length; i < len; i++) {
                    value = node[i];
                    s += '\n' + printNode(value, indent);
                }
                s += (kstr.lpad('', 19)) + ' ' + bold(w3(indent + '}\n'));
            } else {
                for (name in node) {
                    value = node[name];
                    s += (kstr.lpad('', 19)) + ' ' + bold(b8(indent + name));
                    s += '\n' + printNode(value, indent + '  ');
                }
            }
            return s;
        };
        if (ast instanceof Array) {
            results = [];
            for (i = 0, len = ast.length; i < len; i++) {
                node = ast[i];
                results.push(console.log(printNode(node)));
            }
            return results;
        } else {
            return console.log(printNode(ast));
        }
    };

    Print.code = function(msg, code, ext) {
        var tmp;
        if (ext == null) {
            ext = 'js';
        }
        console.log(W1(w5(kstr.lpad(msg + ' ', 80))));
        tmp = slash.tmpfile();
        tmp = slash.swapExt(tmp, ext);
        slash.writeText(tmp, code);
        console.log(childp.execSync(__dirname + "/../node_modules/.bin/colorcat --lineNumbers " + tmp, {
            encoding: 'utf8'
        }));
        return fs.unlink(tmp);
    };

    Print.noon = function(msg, arg) {
        console.log(red(msg));
        return console.log(noon.stringify(arg, {
            colors: true
        }));
    };

    return Print;

})();

module.exports = Print;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/print.coffee