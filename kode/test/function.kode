###
00000000  000   000  000   000   0000000  000000000  000   0000000   000   000  
000       000   000  0000  000  000          000     000  000   000  0000  000  
000000    000   000  000 0 000  000          000     000  000   000  000 0 000  
000       000   000  000  0000  000          000     000  000   000  000  0000  
000        0000000   000   000   0000000     000     000   0000000   000   000  
###

{ kc, ke } = require './utils'

▸ function

    ▸ basics

        kc  """
            function A
            """ ▸
            """
            
            A = (function ()
            {
                return A
            })()
            
            """

        kc  """
            function B
                @a: []
                @b: {}
            """ ▸
            """

            B = (function ()
            {
                function B ()
                {}
            
                B["a"] = []
                B["b"] = {}
                return B
            })()

            """

        kc  """
            function C
                @a: ->
                b: ->
            """ ▸
            """

            C = (function ()
            {
                function C ()
                {}

                C["a"] = function ()
                {}
            
                C.prototype["b"] = function ()
                {}
            
                return C
            })()

            """

        kc  """
            function D
                @: (@a=1,@b=2) ->
            """ ▸
            """

            D = (function ()
            {
                function D (a = 1, b = 2)
                {
                    this.a = a
                    this.b = b
                }

                return D
            })()
            
            """

    ▸ super
    
        kc  """
            function S
                @: -> super()
            """ ▸
            """

            S = (function ()
            {
                function S ()
                {
                    S.__super__.constructor.call(this)
                }

                return S
            })()
            
            """

        kc  """
            function S extends Q
                @: (a) -> 
                    a = 1
                    super a
                    a = 2
            """ ▸
            """

            S = (function ()
            {
                _k_.extend(S, Q)
                function S (a)
                {
                    a = 1
                    S.__super__.constructor.call(this,a)
                    a = 2
                }

                return S
            })()
            
            """
            
    #  0000000   000      0000000           0000000   0000000  000   000   0000000    0000000   000      
    # 000   000  000      000   000        000       000       000   000  000   000  000   000  000      
    # 000   000  000      000   000        0000000   000       000000000  000   000  000   000  000      
    # 000   000  000      000   000             000  000       000   000  000   000  000   000  000      
    #  0000000   0000000  0000000          0000000    0000000  000   000   0000000    0000000   0000000  
    
    ▸ old school

        ke  """
            function T1
                @: ->
                f: (a) -> 1 + a
            
            function T2 extends T1
                @: ->
                f: (a) -> super(a) + 30
                
            (new T2).f 1
            """ ▸ 32
        
        ke  """
            function T3
                 
                f: (a) -> 1 + a
             
            function T4 extends T3
             
                f: (a) -> super(a) + 40
                 
            (new T4).f 1
            """ ▸ 42