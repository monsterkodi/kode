// koffee 1.20.0

/*
000000000  00000000   0000000  000000000          0000000   0000000  00000000    0000000   00000000    0000000   
   000     000       000          000            000       000       000   000  000   000  000   000  000        
   000     0000000   0000000      000            0000000   000       0000000    000000000  00000000   0000000    
   000     000            000     000                 000  000       000   000  000   000  000             000   
   000     00000000  0000000      000            0000000    0000000  000   000  000   000  000        0000000
 */
var $1, _, _1st, __uff_bla__, a, b, c, d, double, f, grammar, i, j, k, kstr, l, len, longstr, lstr, lstr2, m, n, nearley, next, noon, o, p, q, r, ref, ref1, ref2, ref3, ref4, single, slash, t, text, traverse, u, v, w, whilefor_if_then_else_in, x, y, z;

f = function(arg) {
    var a, b, ref, ref1;
    a = (ref = arg.a) != null ? ref : null, b = (ref1 = arg.b) != null ? ref1 : null;
    return console.log(a, b);
};

f({
    c: 4,
    b: 3
});

ref = [1, 2, 3, 4, 5, 6, 7, 8, 9];
for (i = 0, len = ref.length; i < len; i++) {
    a = ref[i];
    console.log('hello');
}

for (a = j = 1; j <= 9; a = ++j) {
    console.log('hello');
}

for (a = k = 1; k <= 9; a = ++k) {
    for (b = m = 1; m <= 9; b = ++m) {
        c = Math.sqrt(a * a + b * b);
        if (!c % 1) {
            return String([a, b, c]);
        }
    }
}

a.b = 1;

a.b = 1;

a.b = 1;

a.b = 1;

a.b = 1;

console.log(a, b, c);

a((function() {
    var len1, n, results;
    results = [];
    for (n = 0, len1 = c.length; n < len1; n++) {
        b = c[n];
        results.push(b);
    }
    return results;
})());

a((function() {
    var len1, n, results;
    results = [];
    for (n = 0, len1 = c.length; n < len1; n++) {
        b = c[n];
        results.push(b);
    }
    return results;
})());

[a, b, c];

[a, b, c];

[1, 2, 3];

[1, 2, 3];

[1, 2, 3];

kstr = require('kstr');

slash = require('kslash');

noon = require('noon');

nearley = require('nearley');

grammar = require('./grammar');

text = slash.readText(__dirname + "/../coffee/test.coffee");

console.log(text);

longstr = "line1\nline2";

lstr = "abc";

lstr2 = "def";

$1 = $$2;

_1st = _2nd;

whilefor_if_then_else_in = 2;

while (next = lexer.next()) {
    delete next.toString;
    if ((ref1 = next.type) === 's' || ref1 === 'n') {
        console.log(blue(kstr.pad(next.line, 3)));
    } else if ((ref2 = next.type) === 'i' || ref2 === 'o') {
        console.log(blue(kstr.pad(next.line, 2)), next.type === 'i' ? '▸' : '◂');
    } else {
        console.log(blue(kstr.pad(next.line, 3)), kstr.pad(next.type, 10), yellow(next.text));
    }
}

if (koffee_77_0 = process.hrtime.bigint()) {
    __uff_bla__ = 3.333;
    _ = 0x10;
    ({
        constructor: function() {}
    });
    console.log('tokenize', (function(b){ let f=1000n; for (let u of ['ns','μs','ms','s']) { if (u=='s' || b<f) { return ''+(1000n*b/f)+' '+u; } f*=1000n; }})(process.hrtime.bigint()-koffee_77_0));
};

text.slice(-1)[0] === '\n';

a = 1;

a === b;

b !== 1;

c >= 1;

d <= 1;

d += 1;

d -= 1;

d *= 1;

d /= 1;

(e < 1 && 1 < f);

(e > 2 && 2 > f);

f * g / h;

if (s[3]) {
    known[l] = s[3];
}

if (s[0] !== '') {
    short[s[0][1]] = "--" + l;
}

if (a != null) {
    a;
} else {
    a = b;
}

if (a != null) {
    a;
} else {
    b;
};

double = "line1 line2";

single = 'l1 l2';

l = ['a', ['b', 'c']];

l = ['a', ['b', 'c'], 1, 2, 3];

traverse = function(b, a) {
    if (a == null) {
        a = {
            b: 1,
            c: {
                d: {
                    e: 1
                }
            }
        };
    }
};

if (true) {
    for (a = n = 1; n <= 2; a = ++n) {
        for (b = o = 1; o <= 3; b = ++o) {
            c = 1;
            d = 1;
        }
    }
    for (a = p = 1; p <= 2; a = ++p) {
        for (b = q = 1; q <= 3; b = ++q) {
            c = 1;
            d = 1;
        }
    }
    for (a = r = 1; r <= 2; a = ++r) {
        for (b = t = 1; t <= 3; b = ++t) {
            c = 1;
            d = 1;
        }
    }
    for (a = u = 1; u <= 2; a = ++u) {
        for (b = v = 1; v <= 3; b = ++v) {
            c = 1;
            d = 1;
        }
    }
    b = true ? false : true;
    b = false ? (true, false) : (true, false);
    b = false ? true : false;
    b = false ? (true, false) : (true, false);
    b = false ? (a() ? 2 : b() ? 4 : 3) : (true, false);
    b = false ? (a() ? 2 : b() ? 4 : 3) : (true, false);
}

for (a = w = 1; w <= 2; a = ++w) {
    for (b = x = 1; x <= 3; b = ++x) {
        c = 1;
        d = 1;
    }
}

for (a = y = 1; y <= 9; a = ++y) {
    for (b = z = 1; z <= 9; b = ++z) {
        c = 3;
        ({
            d: {
                e: 1
            }
        });
    }
}

while (next = lexer.next()) {
    delete next.toString;
    if ((ref3 = next.type) === 's' || ref3 === 'n') {
        console.log(blue(kstr.pad(next.line, 3)));
    } else if ((ref4 = next.type) === 'i' || ref4 === 'o') {
        console.log(blue(kstr.pad(next.line, 2)), next.type === 'i' ? '▸' : '◂');
    } else {
        console.log(blue(kstr.pad(next.line, 3)), kstr.pad(next.type, 10), yellow(next.text));
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyYXBzLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbInNjcmFwcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBZUEsQ0FBQSxHQUFJLFNBQUMsR0FBRDtBQUFVLFFBQUE7SUFBVCxrQ0FBQSxNQUFJLG9DQUFBO1dBQUssT0FBQSxDQUFFLEdBQUYsQ0FBTSxDQUFOLEVBQVMsQ0FBVDtBQUFWOztBQUVKLENBQUEsQ0FBRTtJQUFBLENBQUEsRUFBRSxDQUFGO0lBQUksQ0FBQSxFQUFFLENBQU47Q0FBRjs7QUFFQTtBQUFBLEtBQUEscUNBQUE7O0lBQ0csT0FBQSxDQUFDLEdBQUQsQ0FBSyxPQUFMO0FBREg7O0FBR0EsS0FBUywwQkFBVDtJQUNHLE9BQUEsQ0FBQyxHQUFELENBQUssT0FBTDtBQURIOztBQUdBLEtBQVMsMEJBQVQ7QUFDQSxTQUFTLDBCQUFUO1FBQ0ksQ0FBQSxHQUFJLElBQUksQ0FBQyxJQUFMLENBQVUsQ0FBQSxHQUFFLENBQUYsR0FBTSxDQUFBLEdBQUUsQ0FBbEI7UUFDSixJQUEyQixDQUFJLENBQUosR0FBUSxDQUFuQztBQUFBLG1CQUFPLE1BQUEsQ0FBTyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFQLEVBQVA7O0FBRko7QUFEQTs7QUFLQSxDQUFDLENBQUMsQ0FBRixHQUFNOztBQUNOLENBQUUsQ0FBQyxDQUFILEdBQU87O0FBQ1AsQ0FBQyxDQUFFLENBQUgsR0FBTzs7QUFDUCxDQUFFLENBQUUsQ0FBSixHQUFROztBQUNSLENBQUksQ0FBSSxDQUFSLEdBQVk7O0FBQUssT0FBQSxDQUVqQixHQUZpQixDQUViLENBRmEsRUFFWCxDQUZXLEVBRVQsQ0FGUzs7QUFJakIsQ0FBQTs7QUFBRTtTQUFBLHFDQUFBOztxQkFBQTtBQUFBOztJQUFGOztBQUNBLENBQUE7O0FBQUc7U0FBQSxxQ0FBQTs7cUJBQUE7QUFBQTs7SUFBSDs7QUFFQSxDQUFDLENBQUQsRUFB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TCxDQUFTLElBQUksQ0FBQyxJQUFkLEVBQW9CLENBQXBCLENBQUwsQ0FBTCxFQUFtQyxJQUFJLENBQUMsR0FBTCxDQUFTLElBQUksQ0FBQyxJQUFkLEVBQW9CLEVBQXBCLENBQW5DLEVBQTRELE1BQUEsQ0FBTyxJQUFJLENBQUMsSUFBWixDQUE1RCxFQUhFOztBQUpUIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAwICAgICAgICAgIDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIFxuICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgICAgICAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICBcbiAgIDAwMCAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDAgICAgICAgICAgICAwMDAwMDAwICAgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICAgXG4gICAwMDAgICAgIDAwMCAgICAgICAgICAgIDAwMCAgICAgMDAwICAgICAgICAgICAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgICAgIDAwMCAgIFxuICAgMDAwICAgICAwMDAwMDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgICAgICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwMDAwMCAgICBcbiMjI1xuXG4jIGEgPz0gYlxuIyBhID0gYyA/IGRcbiMgZnVuYz8gYXJnXG5cbiMgYSA9IGlmIDAgdGhlbiAxIGVsc2UgaWYgMiB0aGVuIDMgZWxzZSA1XG4jIGggPSBhID8gKGMgPyBkKSA6IGVcblxuZiA9IChhOiwgYjopIC0+IGxvZyBhLCBiXG4gICAgXG5mIGM6NCBiOjNcblxuZm9yIGEgaW4gMS4uOVxuICAgIGxvZyAnaGVsbG8nXG5cbmZvciBhIGluIFsxLi45XVxuICAgIGxvZyAnaGVsbG8nXG4gICAgXG5mb3IgYSBpbiBbMS4uOV0gdGhlbiBcXFxuZm9yIGIgaW4gWzEuLjldXG4gICAgYyA9IE1hdGguc3FydCBhKmEgKyBiKmJcbiAgICByZXR1cm4gU3RyaW5nIFthLCBiLCBjXSBpZiBub3QgYyAlIDFcblxuYS5iID0gMSAgICBcbmEgLmIgPSAxICAgIFxuYS4gYiA9IDEgICAgXG5hIC4gYiA9IDEgICAgXG5hICAgLiAgIGIgPSAxICAgIFxuICAgIFxubG9nKGEsYixjKVxuXG5hKGIgZm9yIGIgaW4gYylcbmEgKGIgZm9yIGIgaW4gYylcblxuW2EsYixjLF0gICAgXG5bYSxiLGNdICAgIFxuWzEsMiwzLF0gICAgXG5bMSwyLDNdICAgIFxuWzEgMiAzXSAgICBcbiAgICBcbmtzdHIgICAgPSByZXF1aXJlICdrc3RyJ1xuc2xhc2ggICA9IHJlcXVpcmUgJ2tzbGFzaCdcbm5vb24gICAgPSByZXF1aXJlICdub29uJ1xubmVhcmxleSA9IHJlcXVpcmUgJ25lYXJsZXknXG5ncmFtbWFyID0gcmVxdWlyZSAnLi9ncmFtbWFyJ1xuICAgIFxudGV4dCA9IHNsYXNoLnJlYWRUZXh0IFwiI3tfX2Rpcm5hbWV9Ly4uL2NvZmZlZS90ZXN0LmNvZmZlZVwiXG5sb2cgdGV4dFxuXG5sb25nc3RyID0gXCJcIlwiXG4gICAgbGluZTFcbiAgICBsaW5lMlxuICAgIFwiXCJcIlxuXG5sc3RyID0gXCJcIlwiYWJjXCJcIlwiOyBsc3RyMiA9IFwiXCJcImRlZlwiXCJcIlxuICAgIFxuJDE9JCQyXG5fMXN0ID0gXzJuZFxud2hpbGVmb3JfaWZfdGhlbl9lbHNlX2luID0gMlxuICAgIFxud2hpbGUgbmV4dCA9IGxleGVyLm5leHQoKVxuICAgIGRlbGV0ZSBuZXh0LnRvU3RyaW5nXG4gICAgaWYgbmV4dC50eXBlIGluIFsncycnbiddXG4gICAgICAgIGxvZyBibHVlKGtzdHIucGFkKG5leHQubGluZSwgMykpXG4gICAgZWxzZSBpZiBuZXh0LnR5cGUgaW4gWydpJydvJ11cbiAgICAgICAgbG9nIGJsdWUoa3N0ci5wYWQobmV4dC5saW5lLCAyKSksIGlmIG5leHQudHlwZSA9PSAnaScgdGhlbiAn4pa4JyBlbHNlICfil4InXG4gICAgZWxzZVxuICAgICAgICBsb2cgYmx1ZShrc3RyLnBhZChuZXh0LmxpbmUsIDMpKSwga3N0ci5wYWQobmV4dC50eXBlLCAxMCksIHllbGxvdyhuZXh0LnRleHQpXG5cbuKWuHByb2ZpbGUgJ3Rva2VuaXplJyAgICAgICAgXG4gICAgX191ZmZfYmxhX18gPSAzLjMzM1xuICAgIF8gPSAweDEwXG4gICAgIyAxYWJjID0gMjIzZGFcblxuICAgIEA6IC0+XG4gICAgICAgIFxudGV4dFstMV0gPT0gJ1xcbidcbmEgPSAxXG5hID09IGJcbmIgIT0gMVxuYyA+PSAxXG5kIDw9IDFcbmQgKz0gMVxuZCAtPSAxXG5kICo9IDFcbmQgLz0gMVxuZSA8IDEgPCBmXG5lID4gMiA+IGZcbmYgKiBnIC8gaFxuXG5rbm93bltsXSA9IHNbM10gaWYgc1szXTsgc2hvcnRbc1swXVsxXV0gPSBcIi0tI3tsfVwiIGlmIHNbMF0hPScnXG5cbmEgPz0gYlxuYSA/IGJcblxuZG91YmxlID0gXCJcbiAgICBsaW5lMVxuICAgIGxpbmUyXG4gICAgXCJcbiAgICBcbnNpbmdsZSA9ICdcbiAgICBsMVxuICAgIGwyXG4gICAgJ1xuICAgIFxubCA9IFsnYScgWydiJyAnYyddXVxubCA9IFtcbiAgICAnYScgXG4gICAgWydiJyAnYyddXG4gICAgMSAyIDNcbl1cblxudHJhdmVyc2U9IChcbiAgICBiLFxuICAgIGEgPSBiOjEgYzogZDogZToxXG4gICAgKSAtPlxuXG5pZiB0cnVlICAgICAgICBcbiAgICAgICAgXG4gICAgZm9yIGEgaW4gWzEuLjJdIHRoZW4gZm9yIGIgaW4gWzEuLjNdIFxuICAgICAgICBjID0gMVxuICAgICAgICBkID0gMVxuICAgIFxuICAgIGZvciBhIGluIFsxLi4yXSBcbiAgICAgICAgZm9yIGIgaW4gWzEuLjNdIHRoZW4gYyA9IDE7IGQgPSAxXG4gICAgICAgICAgICBcbiAgICBmb3IgYSBpbiBbMS4uMl0gdGhlbiBmb3IgYiBpbiBbMS4uM10gXG4gICAgICAgIGMgPSAxOyBkPSAxXG4gICAgICAgIFxuICAgIGZvciBhIGluIFsxLi4yXSB0aGVuIGZvciBiIGluIFsxLi4zXSB0aGVuIGMgPSAxOyBkID0gMVxuICAgIFxuICAgIGIgPSBpZiB0cnVlIHRoZW4gZmFsc2UgZWxzZSB5ZXNcbiAgICBiID0gaWYgZmFsc2UgdGhlbiB0cnVlOyBmYWxzZSBlbHNlIHllczsgbm9cbiAgICBiID0gXG4gICAgICAgIGlmIGZhbHNlIFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBlbHNlIFxuICAgICAgICAgICAgbm9cbiAgICBiID0gaWYgZmFsc2UgdGhlbiB0cnVlOyBmYWxzZSBlbHNlIFxuICAgICAgICB5ZXM7IG5vXG4gICAgXG4gICAgYiA9IGlmIGZhbHNlIHRoZW4gKGlmIGEoKSB0aGVuIDIgZWxzZSBpZiBiKCkgdGhlbiA0IGVsc2UgMykgZWxzZSB5ZXM7IG5vICAgIFxuICAgIGIgPSBpZiBmYWxzZSB0aGVuIChpZiBhKCkgdGhlbiAyIGVsc2UgaWYgYigpIHRoZW4gNCBlbHNlIDMpIGVsc2UgeWVzOyBub1xuXG5cbmZvciBhIGluIFsxLi4yXSB0aGVuIGZvciBiIGluIFsxLi4zXSB0aGVuIGMgPSAxOyBkID0gMVxuICAgIFxuZm9yIGEgaW4gWzEuLjldIHRoZW4gZm9yIGIgaW4gWzEuLjldXG4gICAgYyA9IDNcbiAgICBkOiBcbiAgICAgICAgZTogMVxuICAgIFxud2hpbGUgbmV4dCA9IGxleGVyLm5leHQoKVxuICAgIGRlbGV0ZSBuZXh0LnRvU3RyaW5nXG4gICAgaWYgbmV4dC50eXBlIGluIFsncycnbiddXG4gICAgICAgIGxvZyBibHVlKGtzdHIucGFkKG5leHQubGluZSwgMykpXG4gICAgZWxzZSBpZiBuZXh0LnR5cGUgaW4gWydpJydvJ11cbiAgICAgICAgbG9nIGJsdWUoa3N0ci5wYWQobmV4dC5saW5lLCAyKSksIGlmIG5leHQudHlwZSA9PSAnaScgdGhlbiAn4pa4JyBlbHNlICfil4InXG4gICAgZWxzZVxuICAgICAgICBsb2cgYmx1ZShrc3RyLnBhZChuZXh0LmxpbmUsIDMpKSwga3N0ci5wYWQobmV4dC50eXBlLCAxMCksIHllbGxvdyhuZXh0LnRleHQpXG4gICAgXG4gICAgIl19
//# sourceURL=scraps.coffee