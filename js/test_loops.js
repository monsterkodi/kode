// koffee 1.20.0

/*
000       0000000    0000000   00000000    0000000
000      000   000  000   000  000   000  000
000      000   000  000   000  00000000   0000000
000      000   000  000   000  000             000
0000000   0000000    0000000   000        0000000
 */
var cmp;

cmp = require('./test_utils').cmp;

describe('loops', function() {
    it('if', function() {
        cmp("if undefined == null\n    no", "if (undefined === null)\n{\n    false\n}");
        cmp("if 2\n    c = 0\n    1", "if (2)\n{\n    c = 0\n    1\n}");
        cmp('if false then true', "if (false)\n{\n    true\n}");
        cmp("if false\n    true", "if (false)\n{\n    true\n}");
        cmp("if false\n    true\na = 1", "if (false)\n{\n    true\n}\na = 1");
        cmp("if false then true else no\na = 1", "if (false)\n{\n    true\n}\nelse\n{\n    false\n}\na = 1");
        cmp("if false then log no\nlog yes", "if (false)\n{\n    console.log(false)\n}\nconsole.log(true)");
        cmp("if false\n    log no\nlog yes", "if (false)\n{\n    console.log(false)\n}\nconsole.log(true)");
        cmp("if false then true else log no\nlog yes", "if (false)\n{\n    true\n}\nelse\n{\n    console.log(false)\n}\nconsole.log(true)");
        cmp("if 1\n    log 'YES'\nelse if no\n    false\nelse\n    log 'NO'\nlog 'end'", "if (1)\n{\n    console.log('YES')\n}\nelse if (false)\n{\n    false\n}\nelse\n{\n    console.log('NO')\n}\nconsole.log('end')");
        cmp("if a in l\n    log 'YES'\nelse\n    log 'NO'\nlog 'END'", "if (l.indexOf(a) >= 0)\n{\n    console.log('YES')\n}\nelse\n{\n    console.log('NO')\n}\nconsole.log('END')");
        cmp("a = if 0 then if 1 then if 2 then 3 else if 4 then 5 else 6 else if 7 then 8 else 9 else if 10 then 11 else 12", "a = if (0)\n{\n    if (1)\n    {\n        if (2)\n        {\n            3\n        }\n        else if (4)\n        {\n            5\n        }\n        else\n        {\n            6\n        }\n    }\n    else if (7)\n    {\n        8\n    }\n    else\n    {\n        9\n    }\n}\nelse if (10)\n{\n    11\n}\nelse\n{\n    12\n}");
        cmp("if 1 then a.b c", "if (1)\n{\n    a.b(c)\n}");
        cmp("if 2\n    a.b c", "if (2)\n{\n    a.b(c)\n}");
        return cmp("if 3\n    a.b c\n    a.b c", "if (3)\n{\n    a.b(c)\n    a.b(c)\n}");
    });
    it('for in', function() {
        cmp("for t in l\n    t", "var list = l\nfor (var i = 0; i < list.length; i++)\n{\n    var t = list[i]\n    t\n}");
        cmp("for a in [1,2,3] then log a", "var list = [1,2,3]\nfor (var i = 0; i < list.length; i++)\n{\n    var a = list[i]\n    console.log(a)\n}");
        cmp("for a in [1,2,3] then log a\nlog a", "var list = [1,2,3]\nfor (var i = 0; i < list.length; i++)\n{\n    var a = list[i]\n    console.log(a)\n}\nconsole.log(a)");
        cmp("for a in [1,2,3]\n    log '1' a\n    log '2' a\nlog '3' a", "var list = [1,2,3]\nfor (var i = 0; i < list.length; i++)\n{\n    var a = list[i]\n    console.log('1',a)\n    console.log('2',a)\n}\nconsole.log('3',a)");
        cmp("for v,i in @regs\n    log i,v", "var list = this.regs\nfor (var i = 0; i < list.length; i++)\n{\n    var v = list[i]\n    console.log(i,v)\n}");
        return cmp("for [a,b] in @regs\n    log a,b", "var list = this.regs\nfor (var i = 0; i < list.length; i++)\n{\n    var a = list[i][0]\n    var b = list[i][1]\n    console.log(a,b)\n}");
    });
    it('for of', function() {
        return cmp("for key,val of @patterns\n    log key, val", "for (key in this.patterns)\n{\n    val = this.patterns[key]\n    console.log(key,val)\n}");
    });
    it('while', function() {
        cmp("while true\n    log true", "while (true)\n{\n    console.log(true)\n}");
        cmp("while true then log true", "while (true)\n{\n    console.log(true)\n}");
        return cmp("while a == b then log c; log d\nlog e", "while (a === b)\n{\n    console.log(c)\n    console.log(d)\n}\nconsole.log(e)");
    });
    return it('switch', function() {
        return cmp("switch a\n    when 1 then 2", "switch (a)\n{\n    case 1:\n        2\n        break\n}\n");
    });
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/test_loops.coffee