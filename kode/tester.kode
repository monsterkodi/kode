###
000000000  00000000   0000000  000000000  00000000  00000000 
   000     000       000          000     000       000   000
   000     0000000   0000000      000     0000000   0000000  
   000     000            000     000     000       000   000
   000     00000000  0000000      000     00000000  000   000
###

kstr  = require 'kstr'
print = require './print'

comps = 0
succs = 0
fails = []
stack = []
allfails = []
allsuccs = 0

class Tester

    @: (@kode) ->

        @debug = @kode.args.debug
        
    #  0000000  00000000   0000000  000000000  000   0000000   000   000  
    # 000       000       000          000     000  000   000  0000  000  
    # 0000000   0000000   000          000     000  000   000  000 0 000  
    #      000  000       000          000     000  000   000  000  0000  
    # 0000000   00000000   0000000     000     000   0000000   000   000  
    
    section: (t, f) ->

        stack.push t
        comps = 0
        depth = stack.length
        log W1 kstr.lpad('' depth*3-1) + ' ' + global["g#{Math.max 1, 8-2*depth}"] kstr.pad(t,26-depth*3) + ' '
        f()
        stack.pop()
        
    #  0000000   0000000   00     00  00000000    0000000   00000000   00000000  
    # 000       000   000  000   000  000   000  000   000  000   000  000       
    # 000       000   000  000000000  00000000   000000000  0000000    0000000   
    # 000       000   000  000 0 000  000        000   000  000   000  000       
    #  0000000   0000000   000   000  000        000   000  000   000  00000000  
    
    sameObjects: (a, b, keystack) ->
        
        keystack ?= []
        
        return true if Object.is a, b # simple types
        
        if typeof a != typeof b # types differ
            log "#{keystack.join '.'}: #{typeof(a)} !! #{typeof(b)}"
            return false
        if not a is Array and not a is 'object' # not an array or object
            log "#{keystack.join '.'}: #{a} != #{b}"
            return false
            
        if a is Array
            if a.length != b.length 
                log "#{keystack.join '.'}: #{a.length} ][ #{b.length}"
                return false
            for v,i in a
                keystack.push i
                if not @sameObjects v, b[i], keystack
                    keystack.splice 0 keystack.length
                    return false
                return false if empty keystack
                keystack.pop()
        else if a is str
            if a != b
                log r5 @showSpace a
                log g3 @showSpace b
                return false 
        else
            if not @sameObjects Object.keys(a), Object.keys(b)
                return false
            for k,v of a
                keystack.push k
                if not @sameObjects v, b[k], keystack
                    keystack.splice 0 keystack.length
                    return false
                return false if empty keystack
                keystack.pop()
        true
    
    compare: (a, b) =>

        depth = stack.length
        ind = kstr.lpad('' (depth+1)*3)
        
        comps++
                        
        if typeof b == 'function'
            if b(a)
                succs++
                return
        
        # if typeof(a) == typeof(b) == 'object'
            # log red   noon a
            # log green noon b
        if @sameObjects a, b
            succs++
            return
            
        log R1(black(ind + comps + ' ')) + ' ' + r5(@short a) + ' ' + R1(r4 ' ▸ ') + ' ' + g1(@short b)
        
        fails.push
            stack: stack.concat [comps]
            comps: comps
            lhs:   a
            rhs:   b
            
    # 000000000  00000000   0000000  000000000  
    #    000     000       000          000     
    #    000     0000000   0000000      000     
    #    000     000            000     000     
    #    000     00000000  0000000      000     
    
    test: (text, file) ->
        
        return if not /\n\s*▸\s\w+/gm.test text
        
        comps = 0
        succs = 0
        fails = []
        stack = []
                
        g = compare: @compare
            section: @section
        
        try
            tests = @kode.eval text, file, g
        catch err
            # error 'TESTER ERROR'
            fails.push
                stack: stack
                lhs:   file + stack
                rhs:   err
            allfails.push fails[-1]
            return

        return if tests?._test_ != true
            
        tests each (k,v) ->

            if v._section_
                stack.push k
                log G1 y8 ' ' + kstr.pad(k, 25) + ' '
                v()
                stack.pop()
                                        
        allsuccs += succs
        allfails = allfails.concat fails
        
        true
        
    #  0000000  000   000  00     00  00     00   0000000   00000000   000  0000000  00000000  
    # 000       000   000  000   000  000   000  000   000  000   000  000     000   000       
    # 0000000   000   000  000000000  000000000  000000000  0000000    000    000    0000000   
    #      000  000   000  000 0 000  000 0 000  000   000  000   000  000   000     000       
    # 0000000    0000000   000   000  000   000  000   000  000   000  000  0000000  00000000  
    
    showSpace: (s) ->
        if not s is str
            return noon s
        s.split('\n').map((l) -> l+w2('◂')).join '\n'
    
    summarize: ->
        
        for fail in allfails
            log R2(y5 ' ' + fail.stack[0] + ' ') + R1 y5 ' ' + fail.stack[1..].join(r3 ' ▸ ') + ' '
            log r5 @showSpace fail.lhs
            log R1 r3(' ▸ ') 
            log g3 @showSpace fail.rhs
             
            if "[object Object]" in ''+fail.lhs
                print.noon 'lhs' fail.lhs            
            if "[object Object]" in ''+fail.rhs
                print.noon 'rhs' fail.rhs
        
        if allsuccs or fails.length
            summary  = w2 kstr.now() + ' '
            summary += g3(" ✔ ") + g1(allsuccs) + ' ' if allsuccs
            summary += R2 y2(' ❌ ') + y6(allfails.length) + y3(' failures ') if valid allfails
            log summary

        allfails = []
        allsuccs = 0

    #  0000000  000   000   0000000   00000000   000000000  
    # 000       000   000  000   000  000   000     000     
    # 0000000   000000000  000   000  0000000       000     
    #      000  000   000  000   000  000   000     000     
    # 0000000   000   000   0000000   000   000     000     
    
    short: (s) ->
        return s if empty s
        split = (''+s).split '\n'
        
        l = 0
        split = split each (v) ->
            if valid v
                v = ''+v
                a = min v.length, 30 - l
                l += a
                v[...a]
         
        split = split.filter (s) -> s.length
            
        ss = split.join w2 '➜ '
        if l >= 30 then ss += w2 '...'
        ss
        
module.exports = Tester
