// koffee 1.20.0

/*
000       0000000    0000000   00000000    0000000
000      000   000  000   000  000   000  000
000      000   000  000   000  00000000   0000000
000      000   000  000   000  000             000
0000000   0000000    0000000   000        0000000
 */
var cmp, evl, ref;

ref = require('./test_utils'), cmp = ref.cmp, evl = ref.evl;

describe('loops', function() {
    it('for in', function() {
        cmp("for t in l\n    t", "var list = l\nfor (var _1_6_ = 0; _1_6_ < list.length; _1_6_++)\n{\n    t = list[_1_6_]\n    t\n}");
        cmp("for a in [1,2,3] then log a", "var list = [1,2,3]\nfor (var _1_6_ = 0; _1_6_ < list.length; _1_6_++)\n{\n    a = list[_1_6_]\n    console.log(a)\n}");
        cmp("for a in [1,2,3] then log a\nlog a", "var list = [1,2,3]\nfor (var _1_6_ = 0; _1_6_ < list.length; _1_6_++)\n{\n    a = list[_1_6_]\n    console.log(a)\n}\nconsole.log(a)");
        cmp("for a in [1,2,3]\n    log '1' a\n    log '2' a\nlog '3' a", "var list = [1,2,3]\nfor (var _1_6_ = 0; _1_6_ < list.length; _1_6_++)\n{\n    a = list[_1_6_]\n    console.log('1',a)\n    console.log('2',a)\n}\nconsole.log('3',a)");
        cmp("for v,i in @regs\n    log i,v", "var list = this.regs\nfor (i = 0; i < list.length; i++)\n{\n    v = list[i]\n    console.log(i,v)\n}");
        cmp("for [a,b] in @regs\n    log a,b", "var list = this.regs\nfor (var _1_10_ = 0; _1_10_ < list.length; _1_10_++)\n{\n    a = list[_1_10_][0]\n    b = list[_1_10_][1]\n    console.log(a,b)\n}");
        cmp("for a in [1..2] then for b in [1..3] then c = 1; d = 1", "var list = [1,2]\nfor (var _1_6_ = 0; _1_6_ < list.length; _1_6_++)\n{\n    a = list[_1_6_]\n    var list1 = [1,2,3]\n    for (var _1_27_ = 0; _1_27_ < list1.length; _1_27_++)\n    {\n        b = list1[_1_27_]\n        c = 1\n        d = 1\n    }\n}");
        cmp("for a in [1..9] then for b in [1..9]\n    c = 3\n    d:\n        e: 1", "var list = [1,2,3,4,5,6,7,8,9]\nfor (var _1_6_ = 0; _1_6_ < list.length; _1_6_++)\n{\n    a = list[_1_6_]\n    var list1 = [1,2,3,4,5,6,7,8,9]\n    for (var _1_27_ = 0; _1_27_ < list1.length; _1_27_++)\n    {\n        b = list1[_1_27_]\n        c = 3\n        {d:{e:1}}\n    }\n}");
        return cmp("empty = (a) -> a in ['' null undefined] or b", "\nempty = function (a)\n{\n    return ['',null,undefined].indexOf(a) >= 0 || b\n}");
    });
    it('for of', function() {
        return cmp("for key,val of @patterns\n    log key, val", "for (key in this.patterns)\n{\n    val = this.patterns[key]\n    console.log(key,val)\n}");
    });
    it('for tail', function() {
        return cmp("f e for e in l ? []", "var list = ((_1_15_=l) != null ? _1_15_ : [])\nfor (var _1_10_ = 0; _1_10_ < list.length; _1_10_++)\n{\n    e = list[_1_10_]\n    f(e)\n}");
    });
    it('list comprehension', function() {
        cmp("m = ([k, r.exec t] for k,r of rgs)", "m = (function () { var result = []; for (k in rgs)  { var r = rgs[k];result.push([k,r.exec(t)])  } return result })()");
        cmp("m = ([i, k] for k,i in rgs)", "m = (function () { var result = []; var list = rgs; for (i = 0; i < list.length; i++)  { var k = list[i];result.push([i,k])  } return result })()");
        evl("1", 1);
        evl("'abc'", 'abc');
        evl("[1,2,3]", [1, 2, 3]);
        evl("[i for i in [1,2,3]]", [1, 2, 3]);
        evl("(i for i in [1,2,3])", [1, 2, 3]);
        evl("[i*2 for i in [1,2,3]]", [2, 4, 6]);
        evl("(i+3 for i in [1,2,3])", [4, 5, 6]);
        evl("(k for k of {a:1,b:2,c:3})", ['a', 'b', 'c']);
        evl("(v*v for k,v of {a:1,b:2,c:3})", [1, 4, 9]);
        evl("(''+i+' '+v for i,v of [5,4,3])", ['0 5', '1 4', '2 3']);
        return evl('((-> (a={})[v]=k; a)() for k,v of {a:1,b:2,c:3})', [
            {
                '1': 'a'
            }, {
                '2': 'b'
            }, {
                '3': 'c'
            }
        ]);
    });
    it('each', function() {
        cmp("{a:1,b:2}", "{a:1,b:2}");
        evl("a = {a:1,b:2}", {
            a: 1,
            b: 2
        });
        evl("a = {a:1,b:2} each (k,v) -> [k, v*3]", {
            a: 3,
            b: 6
        });
        evl("a = {a:1,b:2} each (k,v) -> ['▸'+k, v]", {
            '▸a': 1,
            '▸b': 2
        });
        evl("a = [1,2,3] each (i,v) -> [i, v]", [1, 2, 3]);
        evl("a = [1,2,3] each (i,v) -> [2-i, v]", [3, 2, 1]);
        evl("a = ['3''2''1'] each (i,v) -> [i, v+'▸'+i]", ['3▸0', '2▸1', '1▸2']);
        evl("a = 'hello' each (i,c) -> [i,c+c]", "hheelllloo");
        return evl("a = 'hello world' each (i,c) -> [i,i%2 and c.toUpperCase() or c]", "hElLo wOrLd");
    });
    it('each single', function() {
        evl("a = '' each ->", '');
        evl("a = {} each ->", {});
        evl("a = [] each ->", []);
        evl("a = [1,2] each -> 'a'", ['a', 'a']);
        evl("a = [1,2] each ->", []);
        evl("a = [1,2,3] each (v) -> v", [1, 2, 3]);
        return evl("a = {a:1,b:2} each (v) -> v*3", {
            a: 3,
            b: 6
        });
    });
    return it('while', function() {
        cmp("while true\n    log 4", "while (true)\n{\n    console.log(4)\n}");
        cmp("while true then log 5", "while (true)\n{\n    console.log(5)\n}");
        return cmp("while a == b then log c; log d\nlog e", "while (a === b)\n{\n    console.log(c)\n    console.log(d)\n}\nconsole.log(e)");
    });
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/test/test_loops.coffee