// koffee 1.20.0

/*
 0000000   0000000   000   000  00000000    0000000  00000000  00     00   0000000   00000000   
000       000   000  000   000  000   000  000       000       000   000  000   000  000   000  
0000000   000   000  000   000  0000000    000       0000000   000000000  000000000  00000000   
     000  000   000  000   000  000   000  000       000       000 0 000  000   000  000        
0000000    0000000    0000000   000   000   0000000  00000000  000   000  000   000  000
 */
var LineMap, SourceMap, kstr, print, slash;

kstr = require('kstr');

slash = require('kslash');

print = require('./print');

SourceMap = (function() {
    function SourceMap(source1) {
        this.source = source1;
        this.jsline = 0;
        this.lines = [];
        this.cache = [];
    }

    SourceMap.prototype.commit = function(s, tl) {
        var ref;
        if (tl === true) {
            while (s[0] === '\n') {
                s = s.slice(1);
                this.jsline++;
            }
            console.log(b7('c'), g4(kstr.lpad(this.jsline, 4)), s);
            this.jsline += this.solve(s);
            return this.cache = [];
        } else if (tl != null ? tl.type : void 0) {
            console.log(b4('t'), r2(kstr.lpad((ref = tl.line) != null ? ref : '?', 4)), s);
            return this.cache.push([s, tl]);
        } else {
            return console.log(b4('.'), b2(kstr.lpad(this.jsline, 4)), w2(s));
        }
    };

    SourceMap.prototype.solve = function(s) {
        var ci, cs, i, j, ji, jsidx, jslns, k, len, ln, p, ref, ref1, ref2, results, slcs, tok;
        if (empty(s)) {
            return 0;
        }
        p = 0;
        slcs = [];
        jsidx = 0;
        jslns = s.split('\n');
        ln = jslns[jsidx];
        console.log(y5('solve'), this.jsline);
        ref1 = (function() {
            results = [];
            for (var k = 0, ref = this.cache.length; 0 <= ref ? k < ref : k > ref; 0 <= ref ? k++ : k--){ results.push(k); }
            return results;
        }).apply(this);
        for (j = 0, len = ref1.length; j < len; j++) {
            ci = ref1[j];
            ref2 = this.cache[ci], cs = ref2[0], tok = ref2[1];
            while ((i = ln.indexOf(cs, p)) <= 0) {
                if (jsidx >= jslns.length - 1) {
                    break;
                }
                ln = jslns[++jsidx];
                p = 0;
            }
            if (i >= 0 && jsidx < jslns.length) {
                ji = this.jsline + jsidx;
                slcs.push([ln.slice(i, i + cs.length), [ji, tok.line, tok.col]]);
                this.add([tok.line - 1, tok.col], [ji, i], ln.slice(i, i + cs.length));
                console.log(b6(ji), w3(i), r4(tok.line), r2(tok.col), cs + r2('◂'));
                p = i + cs.length;
            } else {
                console.log("srcmap.solve can't locate tok " + tok.text + " in " + s);
            }
        }
        console.log(this.jsline, s, slcs);
        return jslns.length - 1;
    };

    SourceMap.prototype.done = function(s) {
        var c, j, k, len, li, lm, ln, ls, ref, ref1, results, results1;
        ls = s.split('\n');
        console.log(b5('d'), this.jsline, ls.length, this.lines.length);
        console.log(ls);
        ref1 = (function() {
            results1 = [];
            for (var k = 0, ref = ls.length; 0 <= ref ? k < ref : k > ref; 0 <= ref ? k++ : k--){ results1.push(k); }
            return results1;
        }).apply(this);
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            li = ref1[j];
            ln = ls[li];
            console.log((b3(kstr.lstrip(li, 4))) + " " + ln + (r2('◂')));
            if (lm = this.lines[li]) {
                results.push((function() {
                    var l, len1, ref2, results2;
                    ref2 = lm.columns;
                    results2 = [];
                    for (l = 0, len1 = ref2.length; l < len1; l++) {
                        c = ref2[l];
                        if (!c) {
                            continue;
                        }
                        results2.push(console.log((red(c.jsstr)) + " " + c.sourceLine + " " + c.sourceColumn));
                    }
                    return results2;
                })());
            } else {
                results.push(void 0);
            }
        }
        return results;
    };

    SourceMap.prototype.add = function(source, target, jsstr) {
        var base, column, line;
        line = target[0], column = target[1];
        if ((base = this.lines)[line] != null) {
            base[line];
        } else {
            base[line] = new LineMap(line);
        }
        return this.lines[line].add(column, source, jsstr);
    };

    SourceMap.prototype.generate = function(code) {
        var buffer, file, j, k, lastColumn, lastSourceColumn, lastSourceLine, len, len1, lineMap, lineNumber, mapping, needComma, ref, ref1, writingline;
        writingline = 0;
        lastColumn = 0;
        lastSourceLine = 0;
        lastSourceColumn = 0;
        needComma = false;
        buffer = "";
        ref = this.lines;
        for (lineNumber = j = 0, len = ref.length; j < len; lineNumber = ++j) {
            lineMap = ref[lineNumber];
            if (!lineMap) {
                continue;
            }
            ref1 = lineMap.columns;
            for (k = 0, len1 = ref1.length; k < len1; k++) {
                mapping = ref1[k];
                if (!mapping) {
                    continue;
                }
                while (writingline < mapping.line) {
                    lastColumn = 0;
                    needComma = false;
                    buffer += ";";
                    writingline++;
                }
                if (needComma) {
                    buffer += ",";
                    needComma = false;
                }
                buffer += this.encodeVlq(mapping.column - lastColumn);
                lastColumn = mapping.column;
                buffer += this.encodeVlq(0);
                buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);
                lastSourceLine = mapping.sourceLine;
                buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);
                lastSourceColumn = mapping.sourceColumn;
                needComma = true;
            }
        }
        file = slash.file(slash.swapExt(this.source, 'js'), this.source);
        return {
            version: 3,
            file: file,
            sources: [slash.file(this.source) || ''],
            mappings: buffer
        };
    };

    SourceMap.prototype.jscode = function(v3Map) {
        var dataURL, encoded, sourceURL;
        encoded = this.base64encode(JSON.stringify(v3Map));
        dataURL = "//# sourceMappingURL=data:application/json;base64," + encoded;
        sourceURL = "//# sourceURL=" + this.source;
        return "\n\n" + dataURL + "\n" + sourceURL + "\n";
    };

    SourceMap.prototype.decodejs = function(encoded) {
        return JSON.parse(this.base64decode(encoded));
    };

    SourceMap.prototype.encodeVlq = function(value) {
        var VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK, answer, nextChunk, signBit, valueToEncode;
        VLQ_SHIFT = 5;
        VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;
        VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;
        signBit = value < 0 ? 1 : 0;
        valueToEncode = (Math.abs(value) << 1) + signBit;
        answer = '';
        while (valueToEncode || !answer) {
            nextChunk = valueToEncode & VLQ_VALUE_MASK;
            valueToEncode = valueToEncode >> VLQ_SHIFT;
            if (valueToEncode) {
                nextChunk |= VLQ_CONTINUATION_BIT;
            }
            answer += this.encodeBase64(nextChunk);
        }
        return answer;
    };

    SourceMap.prototype.base64decode = function(src) {
        return Buffer.from(src, 'base64').toString();
    };

    SourceMap.prototype.base64encode = function(src) {
        return Buffer.from(src).toString('base64');
    };

    SourceMap.prototype.encodeBase64 = function(value) {
        var BASE64_CHARS;
        BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        return BASE64_CHARS[value];
    };

    return SourceMap;

})();

LineMap = (function() {
    function LineMap(line1) {
        this.line = line1;
        this.columns = [];
    }

    LineMap.prototype.add = function(column, srcloc, jsstr) {
        var sourceColumn, sourceLine;
        sourceLine = srcloc[0], sourceColumn = srcloc[1];
        if (this.columns[column]) {
            console.log("LineMap has column " + column, sourceLine, sourceColumn, options);
            return;
        }
        return this.columns[column] = {
            line: this.line,
            column: column,
            sourceLine: sourceLine,
            sourceColumn: sourceColumn,
            jsstr: jsstr
        };
    };

    return LineMap;

})();

module.exports = SourceMap;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/srcmap.coffee