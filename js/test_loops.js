// koffee 1.20.0

/*
000       0000000    0000000   00000000    0000000
000      000   000  000   000  000   000  000
000      000   000  000   000  00000000   0000000
000      000   000  000   000  000             000
0000000   0000000    0000000   000        0000000
 */
var cmp;

cmp = require('./test_utils').cmp;

describe('loops', function() {
    it('for in', function() {
        cmp("for t in l\n    t", "var list = l\nfor (i = 0; i < list.length; i++)\n{\n    t = list[i]\n    t\n}");
        cmp("for a in [1,2,3] then log a", "var list = [1,2,3]\nfor (i = 0; i < list.length; i++)\n{\n    a = list[i]\n    console.log(a)\n}");
        cmp("for a in [1,2,3] then log a\nlog a", "var list = [1,2,3]\nfor (i = 0; i < list.length; i++)\n{\n    a = list[i]\n    console.log(a)\n}\nconsole.log(a)");
        cmp("for a in [1,2,3]\n    log '1' a\n    log '2' a\nlog '3' a", "var list = [1,2,3]\nfor (i = 0; i < list.length; i++)\n{\n    a = list[i]\n    console.log('1',a)\n    console.log('2',a)\n}\nconsole.log('3',a)");
        cmp("for v,i in @regs\n    log i,v", "var list = this.regs\nfor (i = 0; i < list.length; i++)\n{\n    v = list[i]\n    console.log(i,v)\n}");
        cmp("for [a,b] in @regs\n    log a,b", "var list = this.regs\nfor (i = 0; i < list.length; i++)\n{\n    a = list[i][0]\n    b = list[i][1]\n    console.log(a,b)\n}");
        cmp("for a in [1..2] then for b in [1..3] then c = 1; d = 1", "var list = [1,2]\nfor (i = 0; i < list.length; i++)\n{\n    a = list[i]\n    var list1 = [1,2,3]\n    for (i = 0; i < list1.length; i++)\n    {\n        b = list1[i]\n        c = 1\n        d = 1\n    }\n}");
        return cmp("for a in [1..9] then for b in [1..9]\n    c = 3\n    d:\n        e: 1", "var list = [1,2,3,4,5,6,7,8,9]\nfor (i = 0; i < list.length; i++)\n{\n    a = list[i]\n    var list1 = [1,2,3,4,5,6,7,8,9]\n    for (i = 0; i < list1.length; i++)\n    {\n        b = list1[i]\n        c = 3\n        {d:{e:1}}\n    }\n}");
    });
    it('for of', function() {
        return cmp("for key,val of @patterns\n    log key, val", "for (key in this.patterns)\n{\n    val = this.patterns[key]\n    console.log(key,val)\n}");
    });
    return it('while', function() {
        cmp("while true\n    log 4", "while (true)\n{\n    console.log(4)\n}");
        cmp("while true then log 5", "while (true)\n{\n    console.log(5)\n}");
        return cmp("while a == b then log c; log d\nlog e", "while (a === b)\n{\n    console.log(c)\n    console.log(d)\n}\nconsole.log(e)");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdF9sb29wcy5qcyIsInNvdXJjZVJvb3QiOiIuLi9jb2ZmZWUiLCJzb3VyY2VzIjpbInRlc3RfbG9vcHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFDLE1BQU8sT0FBQSxDQUFRLGNBQVI7O0FBRVIsUUFBQSxDQUFTLE9BQVQsRUFBaUIsU0FBQTtJQVFiLEVBQUEsQ0FBRyxRQUFILEVBQVksU0FBQTtRQUVSLEdBQUEsQ0FBSSxtQkFBSixFQUdRLCtFQUhSO1FBWUEsR0FBQSxDQUFJLDZCQUFKLEVBRVEsa0dBRlI7UUFXQSxHQUFBLENBQUksb0NBQUosRUFHUSxrSEFIUjtRQWFBLEdBQUEsQ0FBSSwyREFBSixFQUtRLGtKQUxSO1FBZ0JBLEdBQUEsQ0FBSSwrQkFBSixFQUdRLHNHQUhSO1FBWUEsR0FBQSxDQUFJLGlDQUFKLEVBR1EsNkhBSFI7UUFjQSxHQUFBLENBQUksd0RBQUosRUFFUSwrTUFGUjtlQWlCQSxHQUFBLENBQUksdUVBQUosRUFLUSw2T0FMUjtJQWpHUSxDQUFaO0lBMkhBLEVBQUEsQ0FBRyxRQUFILEVBQVksU0FBQTtlQUVSLEdBQUEsQ0FBSSw0Q0FBSixFQUdRLDBGQUhSO0lBRlEsQ0FBWjtXQW1CQSxFQUFBLENBQUcsT0FBSCxFQUFXLFNBQUE7UUFFUCxHQUFBLENBQUksdUJBQUosRUFHUSx3Q0FIUjtRQVVBLEdBQUEsQ0FBSSx1QkFBSixFQUVRLHdDQUZSO2VBU0EsR0FBQSxDQUFJLHVDQUFKLEVBR1EsK0VBSFI7SUFyQk8sQ0FBWDtBQXRKYSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgIDAwMDAwMDBcbjAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMFxuMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMFxuMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgICAgICAwMDBcbjAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAgICAgIDAwMDAwMDBcbiMjI1xuXG57Y21wfSA9IHJlcXVpcmUgJy4vdGVzdF91dGlscydcblxuZGVzY3JpYmUgJ2xvb3BzJyAtPlxuXG4gICAgIyAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgICAgICAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgMDAwMCAgMDAwXG4gICAgIyAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgICAgICAgIDAwMCAgMDAwIDAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgMDAwICAwMDAwXG4gICAgIyAwMDAgICAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAgICAgIDAwMCAgMDAwICAgMDAwXG5cbiAgICBpdCAnZm9yIGluJyAtPlxuXG4gICAgICAgIGNtcCBcIlwiXCJcbiAgICAgICAgICAgIGZvciB0IGluIGxcbiAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICBcIlwiXCIgXCJcIlwiXG4gICAgICAgICAgICB2YXIgbGlzdCA9IGxcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHQgPSBsaXN0W2ldXG4gICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXCJcIlwiXG5cbiAgICAgICAgY21wIFwiXCJcIlxuICAgICAgICAgICAgZm9yIGEgaW4gWzEsMiwzXSB0aGVuIGxvZyBhXG4gICAgICAgICAgICBcIlwiXCIgXCJcIlwiXG4gICAgICAgICAgICB2YXIgbGlzdCA9IFsxLDIsM11cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGEgPSBsaXN0W2ldXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFwiXCJcIlxuXG4gICAgICAgIGNtcCBcIlwiXCJcbiAgICAgICAgICAgIGZvciBhIGluIFsxLDIsM10gdGhlbiBsb2cgYVxuICAgICAgICAgICAgbG9nIGFcbiAgICAgICAgICAgIFwiXCJcIiBcIlwiXCJcbiAgICAgICAgICAgIHZhciBsaXN0ID0gWzEsMiwzXVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYSA9IGxpc3RbaV1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coYSlcbiAgICAgICAgICAgIFwiXCJcIlxuXG4gICAgICAgIGNtcCBcIlwiXCJcbiAgICAgICAgICAgIGZvciBhIGluIFsxLDIsM11cbiAgICAgICAgICAgICAgICBsb2cgJzEnIGFcbiAgICAgICAgICAgICAgICBsb2cgJzInIGFcbiAgICAgICAgICAgIGxvZyAnMycgYVxuICAgICAgICAgICAgXCJcIlwiIFwiXCJcIlxuICAgICAgICAgICAgdmFyIGxpc3QgPSBbMSwyLDNdXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhID0gbGlzdFtpXVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCcxJyxhKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCcyJyxhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coJzMnLGEpXG4gICAgICAgICAgICBcIlwiXCJcblxuICAgICAgICBjbXAgXCJcIlwiXG4gICAgICAgICAgICBmb3IgdixpIGluIEByZWdzXG4gICAgICAgICAgICAgICAgbG9nIGksdlxuICAgICAgICAgICAgXCJcIlwiIFwiXCJcIlxuICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzLnJlZ3NcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHYgPSBsaXN0W2ldXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coaSx2KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXCJcIlwiXG5cbiAgICAgICAgY21wIFwiXCJcIlxuICAgICAgICAgICAgZm9yIFthLGJdIGluIEByZWdzXG4gICAgICAgICAgICAgICAgbG9nIGEsYlxuICAgICAgICAgICAgXCJcIlwiIFwiXCJcIlxuICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzLnJlZ3NcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGEgPSBsaXN0W2ldWzBdXG4gICAgICAgICAgICAgICAgYiA9IGxpc3RbaV1bMV1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhLGIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcIlwiXCJcblxuICAgICAgICAjIHRvZG86IGxpc3QgdmFyIG5hbWVzXG4gICAgICAgIGNtcCBcIlwiXCJcbiAgICAgICAgICAgIGZvciBhIGluIFsxLi4yXSB0aGVuIGZvciBiIGluIFsxLi4zXSB0aGVuIGMgPSAxOyBkID0gMVxuICAgICAgICAgICAgXCJcIlwiIFwiXCJcIlxuICAgICAgICAgICAgdmFyIGxpc3QgPSBbMSwyXVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYSA9IGxpc3RbaV1cbiAgICAgICAgICAgICAgICB2YXIgbGlzdDEgPSBbMSwyLDNdXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3QxLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGxpc3QxW2ldXG4gICAgICAgICAgICAgICAgICAgIGMgPSAxXG4gICAgICAgICAgICAgICAgICAgIGQgPSAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXCJcIlwiXG5cbiAgICAgICAgY21wIFwiXCJcIlxuICAgICAgICAgICAgZm9yIGEgaW4gWzEuLjldIHRoZW4gZm9yIGIgaW4gWzEuLjldXG4gICAgICAgICAgICAgICAgYyA9IDNcbiAgICAgICAgICAgICAgICBkOlxuICAgICAgICAgICAgICAgICAgICBlOiAxXG4gICAgICAgICAgICBcIlwiXCIgXCJcIlwiXG4gICAgICAgICAgICB2YXIgbGlzdCA9IFsxLDIsMyw0LDUsNiw3LDgsOV1cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGEgPSBsaXN0W2ldXG4gICAgICAgICAgICAgICAgdmFyIGxpc3QxID0gWzEsMiwzLDQsNSw2LDcsOCw5XVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0MS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBsaXN0MVtpXVxuICAgICAgICAgICAgICAgICAgICBjID0gM1xuICAgICAgICAgICAgICAgICAgICB7ZDp7ZToxfX1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcIlwiXCJcblxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAgICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwXG4gICAgIyAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgICAgICAgIDAwMCAgIDAwMCAgMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwXG4gICAgIyAwMDAgICAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAgICAgICAwMDAwMDAwICAgMDAwXG5cbiAgICBpdCAnZm9yIG9mJyAtPlxuXG4gICAgICAgIGNtcCBcIlwiXCJcbiAgICAgICAgICAgIGZvciBrZXksdmFsIG9mIEBwYXR0ZXJuc1xuICAgICAgICAgICAgICAgIGxvZyBrZXksIHZhbFxuICAgICAgICAgICAgXCJcIlwiIFwiXCJcIlxuICAgICAgICAgICAgZm9yIChrZXkgaW4gdGhpcy5wYXR0ZXJucylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLnBhdHRlcm5zW2tleV1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhrZXksdmFsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXCJcIlwiXG5cbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwXG4gICAgIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAwMDBcbiAgICAjIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgIDAwMCAgICAgIDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgIDAwMFxuICAgICMgMDAgICAgIDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDBcblxuICAgIGl0ICd3aGlsZScgLT5cblxuICAgICAgICBjbXAgXCJcIlwiXG4gICAgICAgICAgICB3aGlsZSB0cnVlXG4gICAgICAgICAgICAgICAgbG9nIDRcbiAgICAgICAgICAgIFwiXCJcIiBcIlwiXCJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcIlwiXCJcblxuICAgICAgICBjbXAgXCJcIlwiXG4gICAgICAgICAgICB3aGlsZSB0cnVlIHRoZW4gbG9nIDVcbiAgICAgICAgICAgIFwiXCJcIiBcIlwiXCJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcIlwiXCJcblxuICAgICAgICBjbXAgXCJcIlwiXG4gICAgICAgICAgICB3aGlsZSBhID09IGIgdGhlbiBsb2cgYzsgbG9nIGRcbiAgICAgICAgICAgIGxvZyBlXG4gICAgICAgICAgICBcIlwiXCIgXCJcIlwiXG4gICAgICAgICAgICB3aGlsZSAoYSA9PT0gYilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgICAgICAgICAgXCJcIlwiXG4iXX0=
//# sourceURL=../coffee/test_loops.coffee