// koffee 1.20.0

/*
 0000000  000       0000000    0000000   0000000
000       000      000   000  000       000
000       000      000000000  0000000   0000000
000       000      000   000       000       000
 0000000  0000000  000   000  0000000   0000000
 */
var cmp;

cmp = require('./utils').cmp;

describe('class', function() {
    it('class', function() {
        cmp("class A", "\nclass A\n{}\n");
        cmp("class B\n    @: ->", "\nclass B\n{\n    constructor ()\n    {}\n}\n");
        cmp("class C\n    @a: ->\n    b: ->", "\nclass C\n{\n    static a ()\n    {}\n\n    b ()\n    {}\n}\n");
        cmp("class D\n    a: =>", "\nclass D\n{\n    constructor ()\n    {\n        this.a = this.a.bind(this)\n    }\n\n    a ()\n    {}\n}\n");
        cmp("class E\n    @f: ->\n    @g: ->", "\nclass E\n{\n    static f ()\n    {}\n\n    static g ()\n    {}\n}\n");
        cmp("class F\n    @f: ->\n    @g: ->\n    @h: ->", "\nclass F\n{\n    static f ()\n    {}\n\n    static g ()\n    {}\n\n    static h ()\n    {}\n}\n");
        cmp("class X\n    @: ->\n        '@'\n\n    m: -> 'm'", "\nclass X\n{\n    constructor ()\n    {\n        '@'\n    }\n\n    m ()\n    {\n        return 'm'\n    }\n}\n");
        return cmp("class Y\n    @: -> '@'\n\n    m: ->\n        'm'", "\nclass Y\n{\n    constructor ()\n    {\n        '@'\n    }\n\n    m ()\n    {\n        return 'm'\n    }\n}\n");
    });
    return it('bind', function() {
        return cmp("class A\n    @: -> @f()\n    b: => log 'hello'\n    f: ->\n        g = => @b()\n        g()", "\nclass A\n{\n    constructor ()\n    {\n        this.f()\n        this.b = this.b.bind(this)\n    }\n\n    b ()\n    {\n        console.log('hello')\n    }\n\n    f ()\n    {\n        var g\n\n        g = (function ()\n        {\n            return this.b()\n        }).bind(this)\n        return g()\n    }\n}\n");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vY29mZmVlL3Rlc3QiLCJzb3VyY2VzIjpbImNsYXNzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRQyxNQUFPLE9BQUEsQ0FBUSxTQUFSOztBQUVSLFFBQUEsQ0FBUyxPQUFULEVBQWlCLFNBQUE7SUFFYixFQUFBLENBQUcsT0FBSCxFQUFXLFNBQUE7UUFFUCxHQUFBLENBQUksU0FBSixFQUVRLGlCQUZSO1FBU0EsR0FBQSxDQUFJLG9CQUFKLEVBR1EsK0NBSFI7UUFhQSxHQUFBLENBQUksZ0NBQUosRUFJUSxnRUFKUjtRQWlCQSxHQUFBLENBQUksb0JBQUosRUFHUSw2R0FIUjtRQWtCQSxHQUFBLENBQUksaUNBQUosRUFJUSx1RUFKUjtRQWlCQSxHQUFBLENBQUksNkNBQUosRUFLUSxrR0FMUjtRQXFCQSxHQUFBLENBQUksa0RBQUosRUFNUSxnSEFOUjtlQXVCQSxHQUFBLENBQUksa0RBQUosRUFNUSxnSEFOUjtJQXhITyxDQUFYO1dBK0lBLEVBQUEsQ0FBRyxNQUFILEVBQVUsU0FBQTtlQUVOLEdBQUEsQ0FBSSw2RkFBSixFQU9RLDJUQVBSO0lBRk0sQ0FBVjtBQWpKYSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwXG4wMDAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwXG4wMDAgICAgICAgMDAwICAgICAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwMDAwMFxuMDAwICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwXG4gMDAwMDAwMCAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwMDAwMFxuIyMjXG5cbntjbXB9ID0gcmVxdWlyZSAnLi91dGlscydcblxuZGVzY3JpYmUgJ2NsYXNzJyAtPlxuXG4gICAgaXQgJ2NsYXNzJyAtPlxuXG4gICAgICAgIGNtcCBcIlwiXCJcbiAgICAgICAgICAgIGNsYXNzIEFcbiAgICAgICAgICAgIFwiXCJcIiBcIlwiXCJcblxuICAgICAgICAgICAgY2xhc3MgQVxuICAgICAgICAgICAge31cblxuICAgICAgICAgICAgXCJcIlwiXG5cbiAgICAgICAgY21wIFwiXCJcIlxuICAgICAgICAgICAgY2xhc3MgQlxuICAgICAgICAgICAgICAgIEA6IC0+XG4gICAgICAgICAgICBcIlwiXCIgXCJcIlwiXG5cbiAgICAgICAgICAgIGNsYXNzIEJcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvciAoKVxuICAgICAgICAgICAgICAgIHt9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFwiXCJcIlxuXG4gICAgICAgIGNtcCBcIlwiXCJcbiAgICAgICAgICAgIGNsYXNzIENcbiAgICAgICAgICAgICAgICBAYTogLT5cbiAgICAgICAgICAgICAgICBiOiAtPlxuICAgICAgICAgICAgXCJcIlwiIFwiXCJcIlxuXG4gICAgICAgICAgICBjbGFzcyBDXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljIGEgKClcbiAgICAgICAgICAgICAgICB7fVxuXG4gICAgICAgICAgICAgICAgYiAoKVxuICAgICAgICAgICAgICAgIHt9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFwiXCJcIlxuXG4gICAgICAgIGNtcCBcIlwiXCJcbiAgICAgICAgICAgIGNsYXNzIERcbiAgICAgICAgICAgICAgICBhOiA9PlxuICAgICAgICAgICAgXCJcIlwiIFwiXCJcIlxuXG4gICAgICAgICAgICBjbGFzcyBEXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3RydWN0b3IgKClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYSA9IHRoaXMuYS5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYSAoKVxuICAgICAgICAgICAgICAgIHt9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFwiXCJcIlxuXG4gICAgICAgIGNtcCBcIlwiXCJcbiAgICAgICAgICAgIGNsYXNzIEVcbiAgICAgICAgICAgICAgICBAZjogLT5cbiAgICAgICAgICAgICAgICBAZzogLT5cbiAgICAgICAgICAgIFwiXCJcIiBcIlwiXCJcblxuICAgICAgICAgICAgY2xhc3MgRVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpYyBmICgpXG4gICAgICAgICAgICAgICAge31cblxuICAgICAgICAgICAgICAgIHN0YXRpYyBnICgpXG4gICAgICAgICAgICAgICAge31cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXCJcIlwiXG5cbiAgICAgICAgY21wIFwiXCJcIlxuICAgICAgICAgICAgY2xhc3MgRlxuICAgICAgICAgICAgICAgIEBmOiAtPlxuICAgICAgICAgICAgICAgIEBnOiAtPlxuICAgICAgICAgICAgICAgIEBoOiAtPlxuICAgICAgICAgICAgXCJcIlwiIFwiXCJcIlxuXG4gICAgICAgICAgICBjbGFzcyBGXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljIGYgKClcbiAgICAgICAgICAgICAgICB7fVxuXG4gICAgICAgICAgICAgICAgc3RhdGljIGcgKClcbiAgICAgICAgICAgICAgICB7fVxuXG4gICAgICAgICAgICAgICAgc3RhdGljIGggKClcbiAgICAgICAgICAgICAgICB7fVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBcIlwiXCJcblxuICAgICAgICBjbXAgXCJcIlwiXG4gICAgICAgICAgICBjbGFzcyBYXG4gICAgICAgICAgICAgICAgQDogLT5cbiAgICAgICAgICAgICAgICAgICAgJ0AnXG5cbiAgICAgICAgICAgICAgICBtOiAtPiAnbSdcbiAgICAgICAgICAgIFwiXCJcIiBcIlwiXCJcblxuICAgICAgICAgICAgY2xhc3MgWFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yICgpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAnQCdcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtICgpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ20nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBcIlwiXCJcblxuICAgICAgICBjbXAgXCJcIlwiXG4gICAgICAgICAgICBjbGFzcyBZXG4gICAgICAgICAgICAgICAgQDogLT4gJ0AnXG5cbiAgICAgICAgICAgICAgICBtOiAtPlxuICAgICAgICAgICAgICAgICAgICAnbSdcbiAgICAgICAgICAgIFwiXCJcIiBcIlwiXCJcblxuICAgICAgICAgICAgY2xhc3MgWVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yICgpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAnQCdcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtICgpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ20nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBcIlwiXCJcblxuICAgIGl0ICdiaW5kJyAtPlxuXG4gICAgICAgIGNtcCBcIlwiXCJcbiAgICAgICAgICAgIGNsYXNzIEFcbiAgICAgICAgICAgICAgICBAOiAtPiBAZigpXG4gICAgICAgICAgICAgICAgYjogPT4gbG9nICdoZWxsbydcbiAgICAgICAgICAgICAgICBmOiAtPlxuICAgICAgICAgICAgICAgICAgICBnID0gPT4gQGIoKVxuICAgICAgICAgICAgICAgICAgICBnKClcbiAgICAgICAgICAgIFwiXCJcIiBcIlwiXCJcblxuICAgICAgICAgICAgY2xhc3MgQVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yICgpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmYoKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmIgPSB0aGlzLmIuYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGIgKClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdoZWxsbycpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZiAoKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdcblxuICAgICAgICAgICAgICAgICAgICBnID0gKGZ1bmN0aW9uICgpXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmIoKVxuICAgICAgICAgICAgICAgICAgICB9KS5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFwiXCJcIlxuXG4iXX0=
//# sourceURL=../../coffee/test/class.coffee