// koffee 1.20.0

/*
 0000000   0000000   000   000  00000000    0000000  00000000  00     00   0000000   00000000   
000       000   000  000   000  000   000  000       000       000   000  000   000  000   000  
0000000   000   000  000   000  0000000    000       0000000   000000000  000000000  00000000   
     000  000   000  000   000  000   000  000       000       000 0 000  000   000  000        
0000000    0000000    0000000   000   000   0000000  00000000  000   000  000   000  000
 */
var LineMap, SourceMap, kstr;

kstr = require('kstr');

SourceMap = (function() {
    function SourceMap(source1) {
        this.source = source1;
        this.jsline = 0;
        this.lines = [];
        this.cache = [];
    }

    SourceMap.prototype.commit = function(s, tl) {
        var ref;
        if (tl === true) {
            while (s[0] === '\n') {
                s = s.slice(1);
                this.jsline++;
            }
            this.jsline++;
            this.solve(s);
            console.log(b7('c'), g4(kstr.lpad(this.jsline, 4)), s);
            this.jsline += s.split('\n').length - 1;
            return this.cache = [];
        } else if (tl != null ? tl.type : void 0) {
            console.log(b4('t'), r2(kstr.lpad((ref = tl.line) != null ? ref : '?', 4)), s);
            return this.cache.push([s, tl]);
        } else {
            return console.log(b4('.'), b2(kstr.lpad(this.jsline, 4)), w2(s));
        }
    };

    SourceMap.prototype.solve = function(s) {
        var ci, cs, i, j, k, len, p, ref, ref1, ref2, results, results1, tok;
        p = 0;
        ref1 = (function() {
            results1 = [];
            for (var k = 0, ref = this.cache.length; 0 <= ref ? k < ref : k > ref; 0 <= ref ? k++ : k--){ results1.push(k); }
            return results1;
        }).apply(this);
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            ci = ref1[j];
            ref2 = this.cache[ci], cs = ref2[0], tok = ref2[1];
            i = s.indexOf(cs, p);
            if (i >= 0) {
                console.log(w3(i), r4(tok.line), r2(tok.col), cs);
                results.push(p = i);
            } else {
                results.push(console.log("srcmap.solve cant locate tok " + tok.text + " in " + s));
            }
        }
        return results;
    };

    SourceMap.prototype.done = function(s) {
        return console.log(b5('d'), this.jsline, s.split('\n').length);
    };

    SourceMap.prototype.add = function(source, target) {
        var base, column, line;
        line = target[0], column = target[1];
        if ((base = this.lines)[line] != null) {
            base[line];
        } else {
            base[line] = new LineMap(line);
        }
        return this.lines[line].add(column, source);
    };

    SourceMap.prototype.sourceLocation = function(srcloc) {
        var column, line, lineMap;
        line = srcloc[0], column = srcloc[1];
        while (!((lineMap = this.lines[line]) || (line <= 0))) {
            line--;
        }
        return lineMap && lineMap.sourceLocation(column);
    };

    SourceMap.prototype.generate = function(opt, code) {
        var buffer, j, k, lastColumn, lastSourceColumn, lastSourceLine, len, len1, lineMap, lineNumber, mapping, needComma, ref, ref1, writingline;
        if (opt == null) {
            opt = {};
        }
        writingline = 0;
        lastColumn = 0;
        lastSourceLine = 0;
        lastSourceColumn = 0;
        needComma = false;
        buffer = "";
        ref = this.lines;
        for (lineNumber = j = 0, len = ref.length; j < len; lineNumber = ++j) {
            lineMap = ref[lineNumber];
            if (!lineMap) {
                continue;
            }
            ref1 = lineMap.columns;
            for (k = 0, len1 = ref1.length; k < len1; k++) {
                mapping = ref1[k];
                if (!mapping) {
                    continue;
                }
                while (writingline < mapping.line) {
                    lastColumn = 0;
                    needComma = false;
                    buffer += ";";
                    writingline++;
                }
                if (needComma) {
                    buffer += ",";
                    needComma = false;
                }
                buffer += this.encodeVlq(mapping.column - lastColumn);
                lastColumn = mapping.column;
                buffer += this.encodeVlq(0);
                buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);
                lastSourceLine = mapping.sourceLine;
                buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);
                lastSourceColumn = mapping.sourceColumn;
                needComma = true;
            }
        }
        return {
            version: 3,
            file: opt.target || '',
            sourceRoot: opt.root || '',
            sources: [opt.source || ''],
            names: [],
            mappings: buffer,
            sourcesContent: [code]
        };
    };

    SourceMap.prototype.encodeVlq = function(value) {
        var VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK, answer, nextChunk, signBit, valueToEncode;
        VLQ_SHIFT = 5;
        VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;
        VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;
        signBit = value < 0 ? 1 : 0;
        valueToEncode = (Math.abs(value) << 1) + signBit;
        answer = '';
        while (valueToEncode || !answer) {
            nextChunk = valueToEncode & VLQ_VALUE_MASK;
            valueToEncode = valueToEncode >> VLQ_SHIFT;
            if (valueToEncode) {
                nextChunk |= VLQ_CONTINUATION_BIT;
            }
            answer += this.encodeBase64(nextChunk);
        }
        return answer;
    };

    SourceMap.prototype.encodeBase64 = function(value) {
        var BASE64_CHARS;
        BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        return BASE64_CHARS[value];
    };

    return SourceMap;

})();

LineMap = (function() {
    function LineMap(line1) {
        this.line = line1;
        this.columns = [];
    }

    LineMap.prototype.add = function(column, srcloc) {
        var sourceColumn, sourceLine;
        sourceLine = srcloc[0], sourceColumn = srcloc[1];
        if (this.columns[column]) {
            console.log("LineMap has column " + column, sourceLine, sourceColumn, options);
            return;
        }
        return this.columns[column] = {
            line: this.line,
            column: column,
            sourceLine: sourceLine,
            sourceColumn: sourceColumn
        };
    };

    LineMap.prototype.sourceLocation = function(column) {
        var mapping;
        while (!((mapping = this.columns[column]) || (column <= 0))) {
            column--;
        }
        return mapping && [mapping.sourceLine, mapping.sourceColumn];
    };

    return LineMap;

})();

module.exports = SourceMap;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/srcmap.coffee