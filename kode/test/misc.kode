###
00     00  000   0000000   0000000
000   000  000  000       000
000000000  000  0000000   000
000 0 000  000       000  000
000   000  000  0000000    0000000
###

{ cmp, evl } = require './utils'

describe 'misc' ->

    # 000000000  000   000  000   0000000  
    #    000     000   000  000  000       
    #    000     000000000  000  0000000   
    #    000     000   000  000       000  
    #    000     000   000  000  0000000   
    
    it 'this' ->

        cmp '@'      'this'
        cmp '@a'     'this.a'
        cmp '@a.b'   'this.a.b'
        cmp '@a.b()' 'this.a.b()'
        cmp 't = @'  't = this'
        
        cmp "a.on 'b' @c", "a.on('b',this.c)" 
        cmp "a.on 'b' @c", "a.on('b',this.c)" 

        cmp """
            if @
                1
            """ """
            if (this)
            {
                1
            }
            """

        cmp """
            if @ then 1
            """ """
            if (this)
            {
                1
            }
            """
            
        cmp """
            a @, file
            """ """
            a(this,file)
            """
            
    it 'try' ->
        
        cmp """
            try 
                something
            catch err
                error err
            """ """
            try
            {
                something
            }
            catch (err)
            {
                console.error(err)
            }
            """

        cmp """
            try 
                sthelse
            catch err
                error err
            finally
                cleanup
            """ """
            try
            {
                sthelse
            }
            catch (err)
            {
                console.error(err)
            }
            finally
            {
                cleanup
            }
            """
            
    # 000000000  000   000  00000000    0000000   000   000  
    #    000     000   000  000   000  000   000  000 0 000  
    #    000     000000000  0000000    000   000  000000000  
    #    000     000   000  000   000  000   000  000   000  
    #    000     000   000  000   000   0000000   00     00  
    
    it 'throw' ->
        
        cmp "throw 'msg'" "throw 'msg'"
        
    # 0000000    00000000  000      00000000  000000000  00000000  
    # 000   000  000       000      000          000     000       
    # 000   000  0000000   000      0000000      000     0000000   
    # 000   000  000       000      000          000     000       
    # 0000000    00000000  0000000  00000000     000     00000000  
    
    it 'delete' ->
        
        cmp "delete a"              "delete a"
        cmp "delete @a"             "delete this.a"
        cmp "delete a.b"            "delete a.b"
        
        cmp '[delete a, b]'         ';[delete a,b]'
        cmp 'delete a.b.c'          'delete a.b.c'
        cmp '[delete a.b, a:b]'     ';[delete a.b,{a:b}]'
        cmp 'delete a.b == false'   'delete a.b === false'
            
    # 00000000   00000000   0000000   000   000  000  00000000   00000000
    # 000   000  000       000   000  000   000  000  000   000  000
    # 0000000    0000000   000 00 00  000   000  000  0000000    0000000
    # 000   000  000       000 0000   000   000  000  000   000  000
    # 000   000  00000000   00000 00   0000000   000  000   000  00000000

    it 'require' ->

        cmp "noon  = require 'noon'"    "noon = require('noon')"
        cmp """
            slash = require 'kslash'
            kstr  = require 'kstr'
            """ """
            slash = require('kslash')
            kstr = require('kstr')
            """

    # 00000000  00     00  00000000   000000000  000   000  
    # 000       000   000  000   000     000      000 000   
    # 0000000   000000000  00000000      000       00000    
    # 000       000 0 000  000           000        000     
    # 00000000  000   000  000           000        000     
    
    it 'empty' ->

        cmp """
            if empty [] == false
                1234
            """ """
            if (_k_.empty([]) === false)
            {
                1234
            }
            """
            
        evl "a = []; empty a"           true
        evl "a = {}; empty a"           true
        evl "a = ''; empty a"           true
        evl "a = null; empty a"         true
        evl "a = undefined; empty a"    true
        evl "a = NaN; empty a"          true
        evl 'empty 1 or empty {}'       true
        evl 'empty {} or empty 1'       true
        evl "a = Infinity; empty a"     false
        evl "a = 0; empty a"            false
        evl "a = 'a'; empty a"          false
        evl "a = Infinity; empty a"     false
        evl "a = [null]; empty a"       false
        evl "a = {a:null}; empty a"     false
        evl "a = [[]]; empty a"         false
        evl 'empty "x" or valid {}'     false
        evl 'empty {} and valid []'     false
        
    # 000   000   0000000   000      000  0000000    
    # 000   000  000   000  000      000  000   000  
    #  000 000   000000000  000      000  000   000  
    #    000     000   000  000      000  000   000  
    #     0      000   000  0000000  000  0000000    
    
    it 'valid' ->
        
        evl "valid []"                  false
        evl "valid {}"                  false
        evl "valid ''"                  false
        evl "valid null"                false
        evl "valid undefined"           false
        evl "valid NaN"                 false
        evl 'valid {} and valid 0'      false
        evl "valid Infinity"            true
        evl "valid 0"                   true
        evl "valid 'a'"                 true
        evl "valid [null]"              true
        evl "valid {a:null}"            true
        evl "valid [[]]"                true
        evl 'valid {} or valid 1'       true
        evl "valid 'a' or valid ''"     true
        evl "valid 'a' and empty ''"    true
        
    # 000000000  000   000  00000000   00000000   0000000   00000000  
    #    000      000 000   000   000  000       000   000  000       
    #    000       00000    00000000   0000000   000   000  000000    
    #    000        000     000        000       000   000  000       
    #    000        000     000        00000000   0000000   000       
    
    it 'typeof' ->

        cmp """
            if typeof pat == 'string'
                1
            """ """
            if (typeof(pat) === 'string')
            {
                1
            }
            """

    # 000  000   000   0000000  000000000   0000000   000   000   0000000  00000000   0000000   00000000
    # 000  0000  000  000          000     000   000  0000  000  000       000       000   000  000
    # 000  000 0 000  0000000      000     000000000  000 0 000  000       0000000   000   000  000000
    # 000  000  0000       000     000     000   000  000  0000  000       000       000   000  000
    # 000  000   000  0000000      000     000   000  000   000   0000000  00000000   0000000   000

    it 'instanceof' ->

        cmp 'a instanceof b'  'a instanceof b'
        cmp 'a instanceof b == true'  'a instanceof b === true'

    # 000  000   000         0000000   0000000   000   000  0000000    000  000000000  000   0000000   000   000
    # 000  0000  000        000       000   000  0000  000  000   000  000     000     000  000   000  0000  000
    # 000  000 0 000        000       000   000  000 0 000  000   000  000     000     000  000   000  000 0 000
    # 000  000  0000        000       000   000  000  0000  000   000  000     000     000  000   000  000  0000
    # 000  000   000         0000000   0000000   000   000  0000000    000     000     000   0000000   000   000

    it 'in condition' ->

        cmp "a in l"          "_k_.in(a,l)"
        cmp "a in 'xyz'"      "_k_.in(a,'xyz')"
        cmp "a in [1,2,3]"    "_k_.in(a,[1,2,3])"
        cmp "a not in b"      "!(_k_.in(a,b))"
        cmp "a not in [3,4]"  "!(_k_.in(a,[3,4]))"

        cmp """
            if a in l then 1
            """ """
            if (_k_.in(a,l))
            {
                1
            }
            """

        cmp """
            if not a in l then 2
            """ """
            if (!(_k_.in(a,l)))
            {
                2
            }
            """
            
        cmp """
            if a in l
                2
            """ """
            if (_k_.in(a,l))
            {
                2
            }
            """
            
        # cmp "a = ( a:1 b:2 ) ->",     "a = function(arg)"

    it 'primes' ->

        evl """
            eratosthenes = (n) ->
                
                prime = [x < 2 and 1 or 0 for x in 0..n]
                
                for i in 0..Math.sqrt n
                    
                    if prime[i] == 0
                        
                        l = 2
            
                        while true
                            
                            break if n < j = i * l++
            
                            prime[j] = 1
            
                prime = prime each (i,p) -> [i, parseInt p ? 0 : i]
                prime = prime.filter (p) -> p
                            
            eratosthenes 100
            """, 
            [
              2  3  5  7  11 13 17 19 23 29 31 37 41 43 47 
              53 59 61 67 71 73 79 83 89 97
            ]
        
    #  0000000   0000000   00     00  00     00  00000000  000   000  000000000   0000000
    # 000       000   000  000   000  000   000  000       0000  000     000     000
    # 000       000   000  000000000  000000000  0000000   000 0 000     000     0000000
    # 000       000   000  000 0 000  000 0 000  000       000  0000     000          000
    #  0000000   0000000   000   000  000   000  00000000  000   000     000     0000000

    # it 'comments' ->

        # cmp """
            # # a
            # """
        #  """
            # // a
            # """

        # cmp """
            # # a
            # # b
            # """
        #  """
            # // a
            # // b
            # """

        # cmp """
            # # a
                # # b
            # """
        #  """
            # // a
                # // b
            # """

        # cmp """
            # 1 # a
            # 2    # b
            # """
        #  """
            # 1
              # // a
            # 2
                 # // b
            # """

        