###
000   000   0000000   0000000    00000000
000  000   000   000  000   000  000
0000000    000   000  000   000  0000000
000  000   000   000  000   000  000
000   000   0000000   0000000    00000000
###

slash  = require 'kslash'
kstr   = require 'kstr'
klor   = require 'klor'
karg   = require 'karg'
childp = require 'child_process'
print  = require './print'
pkg    = require "#{__dirname}/../package"

{ register } = require './utils'

klor.kolor.globalize()

class Kode

    @: (@args) ->

        @version = pkg.version
        
        @args ?= {}

        if @args.verbose then @args.debug = @args.block = @args.tokens = @args.parse = true
        if @args.tokens or @args.block or @args.parse or @args.astr then @args.run = false

        @literals = ['bool''num''regex''single''double''triple']
        @atoms    = @literals.concat ['var']
        
        Lexer     = require './lexer'
        Parser    = require './parser'
        Scoper    = require './scoper'
        Stripol   = require './stripol'
        Returner  = require './returner'
        Operator  = require './operator'
        Renderer  = require './renderer'
        Tester    = require './tester'

        @lexer    = new Lexer    @
        @parser   = new Parser   @
        @scoper   = new Scoper   @
        @stripol  = new Stripol  @
        @returner = new Returner @
        @operator = new Operator @
        @renderer = new Renderer @
        @tester   = new Tester   @

    #  0000000   0000000   00     00  00000000   000  000      00000000
    # 000       000   000  000   000  000   000  000  000      000
    # 000       000   000  000000000  00000000   000  000      0000000
    # 000       000   000  000 0 000  000        000  000      000
    #  0000000   0000000   000   000  000        000  0000000  00000000

    @compile: (text, opt={}) -> (new Kode opt).compile text
    compile: (text, file) ->

        return '' if empty kstr.strip text

        ast = @ast text

        if @args.parse then print.ast 'ast' ast
        if @args.astr  then log print.astr ast, @args.scope

        js = @renderer.render ast, file

        if @args.js or @args.debug
            print.code 'js' js 
        js

    ast: (text) ->

        print.code 'kode' text, 'coffee' if @args.verbose or @args.debug or @args.kode

        tokens = @lexer.tokenize text

        if @args.raw    then print.noon 'raw tokens' tokens
        if @args.tokens then print.tokens 'tokens'   tokens

        block = @lexer.blockify tokens

        if @args.raw   then print.noon 'raw block' block
        if @args.block then print.block 'tl block' block

        @operator.collect @returner.collect @scoper.collect @stripol.collect @parser.parse block

    astr: (text, scopes) -> print.astr @ast(text), scopes
        
    # 00000000  000   000   0000000   000
    # 000       000   000  000   000  000
    # 0000000    000 000   000000000  000
    # 000          000     000   000  000
    # 00000000      0      000   000  0000000

    eval: (text, file, glob) ->

        return if empty text

        vm = require 'vm'
        
        sandbox = vm.createContext()
        if glob then sandbox[k] = v for k,v of glob

        sandbox.__filename = file ? 'eval'
        sandbox.__dirname  = slash.dir sandbox.__filename
        sandbox.console    = console
        sandbox.process    = process

        if not (sandbox.module or sandbox.require) or file
            Module = require 'module'
            sandbox.module   = _module  = new Module 'eval'
            sandbox.require  = _require = (file) -> Module._load file, _module, true
            _module.filename = sandbox.__filename
            for r in Object.getOwnPropertyNames require
                if r not in ['paths' 'arguments' 'caller' 'length' 'name']
                    _require[r] = require[r]

            _require.paths = _module.paths = Module._nodeModulePaths process.cwd()
            _require.resolve = (request) -> Module._resolveFilename request, _module

        try
            js = @compile text, file
            vm.runInContext js, sandbox
        catch err
            error err, text
            throw err

    #  0000000  000      000
    # 000       000      000
    # 000       000      000
    # 000       000      000
    #  0000000  0000000  000

    cli: ->

        if @args.compile
            log @compile @args.compile
            return
            
        if @args.eval
            log @eval @args.eval, 'eval', global
            return

        return if not @args.files.length

        for file in @args.files

            file = slash.resolve file
            log gray file if @args.verbose

            text = slash.readText file

            if empty text then error Y4 r2 "can't read #{R3 y5 file}"; continue

            if 
                @args.outdir
                                js  = @compile text, file
                                out = slash.resolve @args.outdir, slash.file file
                                out = slash.swapExt out, 'js'
                                if not slash.writeText out, js then error R2 y3 "can't write #{R3 y6 out}"
                @args.js    ➜   @compile text, file
                @args.test  ➜   @tester.test text, file
                @args.run   ➜   log @eval text, file, global
                            ➜   log @compile text
                
            if @args.watch  ➜   slash.watch file, @onChange
                
        if @args.test then @tester.summarize()
                
    #  0000000   000   000   0000000  000   000   0000000   000   000   0000000   00000000  
    # 000   000  0000  000  000       000   000  000   000  0000  000  000        000       
    # 000   000  000 0 000  000       000000000  000000000  000 0 000  000  0000  0000000   
    # 000   000  000  0000  000       000   000  000   000  000  0000  000   000  000       
    #  0000000   000   000   0000000  000   000  000   000  000   000   0000000   00000000  
    
    onChange: (file) =>

        text = slash.readText file

        if empty text then error Y4 r2 "can't read #{R3 y5 file}"; return

        if 
            @args.outdir
                    
                js  = @compile text, file
                out = slash.resolve @args.outdir, slash.file file
                out = slash.swapExt out, 'js'
                if not slash.writeText out, js
                    error R2 y3 "can't write #{R3 y6 out}"
                    
            @args.test
            
                for k,v of require.cache # invalidate cache for changed file
                    if slash.base(k) == slash.base(file)
                        delete require.cache[k]
                
                if @tester.test text, file
                    @tester.summarize()
                else
                    for f in @args.files ➜ @tester.test slash.readText(f), f
                    @tester.summarize()
                    
            @args.run
                    
                    log @eval text, file, global
            
# 00     00   0000000   000  000   000
# 000   000  000   000  000  0000  000
# 000000000  000000000  000  000 0 000
# 000 0 000  000   000  000  000  0000
# 000   000  000   000  000  000   000

module.exports = Kode

if not module.parent or slash.resolve(module.parent.path).endsWith '/kode/bin'

    if '--' in process.argv
        ddi = process.argv.indexOf '--'
        passOnArgv   = process.argv.slice ddi+1
        process.argv = process.argv.slice 0 ddi
    
    args = karg """
        kode
            files       **
            eval        evaluate a string and print the result
            compile     transpile a string and print the result
            outdir      transpile files into output directory
            run         execute files                               = true
            test        execute tests                               = false
            watch       watch for changes and compile, test or run  = false
            map         generate inline source maps                 = true
            kode        pretty print input code                     = false
            js          pretty print transpiled js code             = false
            header      prepend output with version header          = false -H
            tokens      print tokens                                = false -T
            block       print block tree                            = false -B
            parse       print parse tree                            = false -P
            astr        print parse tree as string                  = false -A
            scope       print scopes                                = false -S
            verbose     log everything                              = false
            debug       log debug                                   = false
            raw         log raw                                     = false -R

        ▸
            --      
                arguments following a standalone -- are ignored
                and passed on to the executed script
            
        version  #{pkg.version}
        """
        
    process.argv = process.argv[..1].concat passOnArgv ? []
    
    register()
    kode = new Kode args
    kode.cli()
